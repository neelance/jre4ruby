require "rjava"

# 
# Copyright 2000-2005 Sun Microsystems, Inc.  All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
# 
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the LICENSE file that accompanied this code.
# 
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
# 
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
# 
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
# CA 95054 USA or visit www.sun.com if you need additional information or
# have any questions.
module Sun::Security::Tools
  module JarSignerResourcesImports
    class_module.module_eval {
      include ::Java::Lang
      include ::Sun::Security::Tools
    }
  end
  
  # 
  # <p> This class represents the <code>ResourceBundle</code>
  # for JarSigner.
  class JarSignerResources < Java::Util::ListResourceBundle
    include_class_members JarSignerResourcesImports
    
    class_module.module_eval {
      # shared (from jarsigner)
      const_set_lazy(:Contents) { Array.typed(Array.typed(Object)).new([Array.typed(Object).new([" ", " "]), Array.typed(Object).new(["  ", "  "]), Array.typed(Object).new(["      ", "      "]), Array.typed(Object).new([", ", ", "]), Array.typed(Object).new(["provName not a provider", "{0} not a provider"]), Array.typed(Object).new(["signerClass is not a signing mechanism", "{0} is not a signing mechanism"]), Array.typed(Object).new(["jarsigner error: ", "jarsigner error: "]), Array.typed(Object).new(["Illegal option: ", "Illegal option: "]), Array.typed(Object).new(["-keystore must be NONE if -storetype is {0}", "-keystore must be NONE if -storetype is {0}"]), Array.typed(Object).new(["-keypass can not be specified if -storetype is {0}", "-keypass can not be specified if -storetype is {0}"]), Array.typed(Object).new(["If -protected is specified, then -storepass and -keypass must not be specified", "If -protected is specified, then -storepass and -keypass must not be specified"]), Array.typed(Object).new(["If keystore is not password protected, then -storepass and -keypass must not be specified", "If keystore is not password protected, then -storepass and -keypass must not be specified"]), Array.typed(Object).new(["Usage: jarsigner [options] jar-file alias", "Usage: jarsigner [options] jar-file alias"]), Array.typed(Object).new(["       jarsigner -verify [options] jar-file", "       jarsigner -verify [options] jar-file"]), Array.typed(Object).new(["[-keystore <url>]           keystore location", "[-keystore <url>]           keystore location"]), Array.typed(Object).new(["[-storepass <password>]     password for keystore integrity", "[-storepass <password>]     password for keystore integrity"]), Array.typed(Object).new(["[-storetype <type>]         keystore type", "[-storetype <type>]         keystore type"]), Array.typed(Object).new(["[-keypass <password>]       password for private key (if different)", "[-keypass <password>]       password for private key (if different)"]), Array.typed(Object).new(["[-sigfile <file>]           name of .SF/.DSA file", "[-sigfile <file>]           name of .SF/.DSA file"]), Array.typed(Object).new(["[-signedjar <file>]         name of signed JAR file", "[-signedjar <file>]         name of signed JAR file"]), Array.typed(Object).new(["[-digestalg <algorithm>]    name of digest algorithm", "[-digestalg <algorithm>]    name of digest algorithm"]), Array.typed(Object).new(["[-sigalg <algorithm>]       name of signature algorithm", "[-sigalg <algorithm>]       name of signature algorithm"]), Array.typed(Object).new(["[-verify]                   verify a signed JAR file", "[-verify]                   verify a signed JAR file"]), Array.typed(Object).new(["[-verbose]                  verbose output when signing/verifying", "[-verbose]                  verbose output when signing/verifying"]), Array.typed(Object).new(["[-certs]                    display certificates when verbose and verifying", "[-certs]                    display certificates when verbose and verifying"]), Array.typed(Object).new(["[-tsa <url>]                location of the Timestamping Authority", "[-tsa <url>]                location of the Timestamping Authority"]), Array.typed(Object).new(["[-tsacert <alias>]          public key certificate for Timestamping Authority", "[-tsacert <alias>]          public key certificate for Timestamping Authority"]), Array.typed(Object).new(["[-altsigner <class>]        class name of an alternative signing mechanism", "[-altsigner <class>]        class name of an alternative signing mechanism"]), Array.typed(Object).new(["[-altsignerpath <pathlist>] location of an alternative signing mechanism", "[-altsignerpath <pathlist>] location of an alternative signing mechanism"]), Array.typed(Object).new(["[-internalsf]               include the .SF file inside the signature block", "[-internalsf]               include the .SF file inside the signature block"]), Array.typed(Object).new(["[-sectionsonly]             don't compute hash of entire manifest", "[-sectionsonly]             don't compute hash of entire manifest"]), Array.typed(Object).new(["[-protected]                keystore has protected authentication path", "[-protected]                keystore has protected authentication path"]), Array.typed(Object).new(["[-providerName <name>]      provider name", "[-providerName <name>]      provider name"]), Array.typed(Object).new(["[-providerClass <class>     name of cryptographic service provider's", "[-providerClass <class>     name of cryptographic service provider's"]), Array.typed(Object).new(["  [-providerArg <arg>]] ... master class file and constructor argument", "  [-providerArg <arg>]] ... master class file and constructor argument"]), Array.typed(Object).new(["s", "s"]), Array.typed(Object).new(["m", "m"]), Array.typed(Object).new(["k", "k"]), Array.typed(Object).new(["i", "i"]), Array.typed(Object).new(["  s = signature was verified ", "  s = signature was verified "]), Array.typed(Object).new(["  m = entry is listed in manifest", "  m = entry is listed in manifest"]), Array.typed(Object).new(["  k = at least one certificate was found in keystore", "  k = at least one certificate was found in keystore"]), Array.typed(Object).new(["  i = at least one certificate was found in identity scope", "  i = at least one certificate was found in identity scope"]), Array.typed(Object).new(["no manifest.", "no manifest."]), Array.typed(Object).new(["jar is unsigned. (signatures missing or not parsable)", "jar is unsigned. (signatures missing or not parsable)"]), Array.typed(Object).new(["jar verified.", "jar verified."]), Array.typed(Object).new(["jarsigner: ", "jarsigner: "]), Array.typed(Object).new(["signature filename must consist of the following characters: A-Z, 0-9, _ or -", "signature filename must consist of the following characters: A-Z, 0-9, _ or -"]), Array.typed(Object).new(["unable to open jar file: ", "unable to open jar file: "]), Array.typed(Object).new(["unable to create: ", "unable to create: "]), Array.typed(Object).new(["   adding: ", "   adding: "]), Array.typed(Object).new([" updating: ", " updating: "]), Array.typed(Object).new(["  signing: ", "  signing: "]), Array.typed(Object).new(["attempt to rename signedJarFile to jarFile failed", "attempt to rename {0} to {1} failed"]), Array.typed(Object).new(["attempt to rename jarFile to origJar failed", "attempt to rename {0} to {1} failed"]), Array.typed(Object).new(["unable to sign jar: ", "unable to sign jar: "]), Array.typed(Object).new(["Enter Passphrase for keystore: ", "Enter Passphrase for keystore: "]), Array.typed(Object).new(["keystore load: ", "keystore load: "]), Array.typed(Object).new(["certificate exception: ", "certificate exception: "]), Array.typed(Object).new(["unable to instantiate keystore class: ", "unable to instantiate keystore class: "]), Array.typed(Object).new(["Certificate chain not found for: alias.  alias must reference a valid KeyStore key entry containing a private key and corresponding public key certificate chain.", "Certificate chain not found for: {0}.  {1} must reference a valid KeyStore key entry containing a private key and corresponding public key certificate chain."]), Array.typed(Object).new(["found non-X.509 certificate in signer's chain", "found non-X.509 certificate in signer's chain"]), Array.typed(Object).new(["incomplete certificate chain", "incomplete certificate chain"]), Array.typed(Object).new(["Enter key password for alias: ", "Enter key password for {0}: "]), Array.typed(Object).new(["unable to recover key from keystore", "unable to recover key from keystore"]), Array.typed(Object).new(["key associated with alias not a private key", "key associated with {0} not a private key"]), Array.typed(Object).new(["you must enter key password", "you must enter key password"]), Array.typed(Object).new(["unable to read password: ", "unable to read password: "]), Array.typed(Object).new(["certificate is valid from", "certificate is valid from {0} to {1}"]), Array.typed(Object).new(["certificate expired on", "certificate expired on {0}"]), Array.typed(Object).new(["certificate is not valid until", "certificate is not valid until {0}"]), Array.typed(Object).new(["certificate will expire on", "certificate will expire on {0}"]), Array.typed(Object).new(["requesting a signature timestamp", "requesting a signature timestamp"]), Array.typed(Object).new(["TSA location: ", "TSA location: "]), Array.typed(Object).new(["TSA certificate: ", "TSA certificate: "]), Array.typed(Object).new(["no response from the Timestamping Authority. ", "no response from the Timestamping Authority. "]), Array.typed(Object).new(["When connecting from behind a firewall then an HTTP proxy may need to be specified. ", "When connecting from behind a firewall then an HTTP proxy may need to be specified. "]), Array.typed(Object).new(["Supply the following options to jarsigner: ", "Supply the following options to jarsigner: "]), Array.typed(Object).new(["Certificate not found for: alias.  alias must reference a valid KeyStore entry containing an X.509 public key certificate for the Timestamping Authority.", "Certificate not found for: {0}.  {1} must reference a valid KeyStore entry containing an X.509 public key certificate for the Timestamping Authority."]), Array.typed(Object).new(["using an alternative signing mechanism", "using an alternative signing mechanism"]), Array.typed(Object).new(["entry was signed on", "entry was signed on {0}"]), Array.typed(Object).new(["Warning: ", "Warning: "]), Array.typed(Object).new(["This jar contains unsigned entries which have not been integrity-checked. ", "This jar contains unsigned entries which have not been integrity-checked. "]), Array.typed(Object).new(["This jar contains entries whose signer certificate has expired. ", "This jar contains entries whose signer certificate has expired. "]), Array.typed(Object).new(["This jar contains entries whose signer certificate will expire within six months. ", "This jar contains entries whose signer certificate will expire within six months. "]), Array.typed(Object).new(["This jar contains entries whose signer certificate is not yet valid. ", "This jar contains entries whose signer certificate is not yet valid. "]), Array.typed(Object).new(["Re-run with the -verbose option for more details.", "Re-run with the -verbose option for more details."]), Array.typed(Object).new(["Re-run with the -verbose and -certs options for more details.", "Re-run with the -verbose and -certs options for more details."]), Array.typed(Object).new(["The signer certificate has expired.", "The signer certificate has expired."]), Array.typed(Object).new(["The signer certificate will expire within six months.", "The signer certificate will expire within six months."]), Array.typed(Object).new(["The signer certificate is not yet valid.", "The signer certificate is not yet valid."]), Array.typed(Object).new(["The signer certificate's KeyUsage extension doesn't allow code signing.", "The signer certificate's KeyUsage extension doesn't allow code signing."]), Array.typed(Object).new(["The signer certificate's ExtendedKeyUsage extension doesn't allow code signing.", "The signer certificate's ExtendedKeyUsage extension doesn't allow code signing."]), Array.typed(Object).new(["The signer certificate's NetscapeCertType extension doesn't allow code signing.", "The signer certificate's NetscapeCertType extension doesn't allow code signing."]), Array.typed(Object).new(["This jar contains entries whose signer certificate's KeyUsage extension doesn't allow code signing.", "This jar contains entries whose signer certificate's KeyUsage extension doesn't allow code signing."]), Array.typed(Object).new(["This jar contains entries whose signer certificate's ExtendedKeyUsage extension doesn't allow code signing.", "This jar contains entries whose signer certificate's ExtendedKeyUsage extension doesn't allow code signing."]), Array.typed(Object).new(["This jar contains entries whose signer certificate's NetscapeCertType extension doesn't allow code signing.", "This jar contains entries whose signer certificate's NetscapeCertType extension doesn't allow code signing."]), Array.typed(Object).new(["[{0} extension does not support code signing]", "[{0} extension does not support code signing]"]), ]) }
      const_attr_reader  :Contents
    }
    
    typesig { [] }
    # 
    # Returns the contents of this <code>ResourceBundle</code>.
    # 
    # <p>
    # 
    # @return the contents of this <code>ResourceBundle</code>.
    def get_contents
      return Contents
    end
    
    typesig { [] }
    def initialize
      super()
    end
    
    private
    alias_method :initialize__jar_signer_resources, :initialize
  end
  
end
