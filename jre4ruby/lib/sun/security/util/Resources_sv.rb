require "rjava"

# 
# Copyright 2001-2006 Sun Microsystems, Inc.  All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
# 
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the LICENSE file that accompanied this code.
# 
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
# 
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
# 
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
# CA 95054 USA or visit www.sun.com if you need additional information or
# have any questions.
module Sun::Security::Util
  module Resources_svImports
    class_module.module_eval {
      include ::Java::Lang
      include ::Sun::Security::Util
    }
  end
  
  # 
  # <p> This class represents the <code>ResourceBundle</code>
  # for javax.security.auth and sun.security.
  class Resources_sv < Java::Util::ListResourceBundle
    include_class_members Resources_svImports
    
    class_module.module_eval {
      # shared (from jarsigner)
      # shared (from keytool)
      # keytool
      # Translators of the following 5 pairs, ATTENTION:
      # the next 5 string pairs are meant to be combined into 2 paragraphs,
      # 1+3+4 and 2+3+5. make sure your translation also does.
      # rest is same as -certreq starting from -keystore *
      # {"-export      [-v] [-rfc] [-protected]",
      # "-export      [-v] [-rfc] [-protected]"},
      # rest is same as -certreq starting from -keystore *
      # {"-genkey      [-v] [-protected]",
      # "-genkey      [-v] [-protected]"},
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # {"-identitydb  [-v] [-protected]",
      # "-identitydb  [-v] [-protected]"},
      # {"\t     [-file <idb_file>]", "\t     [-file <idb_file>]"},
      # rest is same as -certreq starting from -keystore *
      # {"-import      [-v] [-noprompt] [-trustcacerts] [-protected]",
      # "-import      [-v] [-noprompt] [-trustcacerts] [-protected]"},
      # rest is same as -certreq starting from -keystore *
      # raden \u00e4r f\u00f6r l\u00e5ng, dela upp p\u00e5 2
      # rest is same as -certreq starting from -keystore *
      # {"-keyclone    [-v] [-protected]",
      # "-keyclone    [-v] [-protected]"},
      # {"\t     [-alias <alias>] -dest <dest_alias>",
      # "\t     [-alias <alias>] -dest <dest_alias>"},
      # {"\t     [-keypass <keypass>] [-new <new_keypass>]",
      # "\t     [-keypass <keypass>] [-new <new_keypass>]"},
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # {"-selfcert    [-v] [-protected]",
      # "-selfcert    [-v] [-protected]"},
      # {"\t     [-dname <dname>] [-validity <valDays>]",
      # "\t     [-dname <dname>] [-validity <valDays>]"},
      # {"\t     [-keypass <keypass>] [-sigalg <sigalg>]",
      # "\t     [-keypass <keypass>] [-sigalg <sigalg>]"},
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # policytool
      # javax.security.auth.PrivateCredentialPermission
      # javax.security.auth.x500
      # javax.security.auth.Subject
      # javax.security.auth.login.AppConfigurationEntry
      # javax.security.auth.login.LoginContext
      # sun.security.provider.PolicyFile
      # sun.security.provider.PolicyParser
      # sun.security.pkcs11.SunPKCS11
      # --- DEPRECATED ---
      # javax.security.auth.Policy
      const_set_lazy(:Contents) { Array.typed(Array.typed(Object)).new([Array.typed(Object).new([" ", " "]), Array.typed(Object).new(["  ", "  "]), Array.typed(Object).new(["      ", "      "]), Array.typed(Object).new([", ", ", "]), Array.typed(Object).new(["\n", "\n"]), Array.typed(Object).new(["*******************************************", "*******************************************"]), Array.typed(Object).new(["*******************************************\n\n", "*******************************************\n\n"]), Array.typed(Object).new(["keytool error: ", "nyckelverktygsfel: "]), Array.typed(Object).new(["Illegal option:  ", "Ogiltigt alternativ:  "]), Array.typed(Object).new(["Try keytool -help", "Try keytool -help"]), Array.typed(Object).new(["Command option <flag> needs an argument.", ("Kommandoalternativet {0} beh".to_u << 0x00f6 << "ver ett argument.")]), Array.typed(Object).new(["Warning:  Different store and key passwords not supported for PKCS12 KeyStores. Ignoring user-specified <command> value.", ("Varning!  PKCS12 KeyStores har inte st".to_u << 0x00f6 << "d f".to_u << 0x00f6 << "r olika l".to_u << 0x00f6 << "senord f".to_u << 0x00f6 << "r lagret och nyckeln. Det anv".to_u << 0x00e4 << "ndarspecificerade {0}-v".to_u << 0x00e4 << "rdet ignoreras.")]), Array.typed(Object).new(["-keystore must be NONE if -storetype is {0}", ("-keystore m".to_u << 0x00e5 << "ste vara NONE om -storetype ".to_u << 0x00e4 << "r {0}")]), Array.typed(Object).new(["Too may retries, program terminated", ("F".to_u << 0x00f6 << "r m".to_u << 0x00e5 << "nga f".to_u << 0x00f6 << "rs".to_u << 0x00f6 << "k. Programmet avslutas.")]), Array.typed(Object).new(["-storepasswd and -keypasswd commands not supported if -storetype is {0}", ("-storepasswd- och -keypasswd-kommandon st".to_u << 0x00f6 << "ds inte om -storetype ".to_u << 0x00e4 << "r {0}")]), Array.typed(Object).new(["-keypasswd commands not supported if -storetype is PKCS12", (" ".to_u << 0x0096 << "keypasswd-kommandon st".to_u << 0x00f6 << "ds inte om -storetype ".to_u << 0x00e4 << "r inst".to_u << 0x00e4 << "lld p".to_u << 0x00e5 << " PKCS12")]), Array.typed(Object).new(["-keypass and -new can not be specified if -storetype is {0}", ("-keypass och -new kan inte anges om -storetype ".to_u << 0x00e4 << "r {0}")]), Array.typed(Object).new(["if -protected is specified, then -storepass, -keypass, and -new must not be specified", ("om -protected har angetts f".to_u << 0x00e5 << "r inte -storepass, -keypass och -new anges")]), Array.typed(Object).new(["if -srcprotected is specified, then -srcstorepass and -srckeypass must not be specified", ("om -srcprotected anges f".to_u << 0x00e5 << "r -srcstorepass och -srckeypass inte anges")]), Array.typed(Object).new(["if keystore is not password protected, then -storepass, -keypass, and -new must not be specified", ("om nyckelfilen inte ".to_u << 0x00e4 << "r l".to_u << 0x00f6 << "senordsskyddad f".to_u << 0x00e5 << "r -storepass, -keypass och -new inte anges")]), Array.typed(Object).new(["if source keystore is not password protected, then -srcstorepass and -srckeypass must not be specified", ("om k".to_u << 0x00e4 << "llnyckelfilen inte ".to_u << 0x00e4 << "r l".to_u << 0x00f6 << "senordsskyddad f".to_u << 0x00e5 << "r -srcstorepass och -srckeypass inte anges")]), Array.typed(Object).new(["Validity must be greater than zero", ("Giltigheten m".to_u << 0x00e5 << "ste vara st".to_u << 0x00f6 << "rre ".to_u << 0x00e4 << "n noll")]), Array.typed(Object).new(["provName not a provider", ("{0} inte en leverant".to_u << 0x00f6 << "r")]), Array.typed(Object).new(["Usage error: no command provided", ("Anv".to_u << 0x00e4 << "ndningsfel: inget kommando angivet")]), Array.typed(Object).new(["Usage error, <arg> is not a legal command", ("Anv".to_u << 0x00e4 << "ndningsfel: {0} ".to_u << 0x00e4 << "r inte ett giltigt kommando")]), Array.typed(Object).new(["Source keystore file exists, but is empty: ", ("Nyckellagrets k".to_u << 0x00e4 << "llfil finns, men ".to_u << 0x00e4 << "r tom: ")]), Array.typed(Object).new(["Please specify -srckeystore", "Ange -srckeystore"]), Array.typed(Object).new(["Must not specify both -v and -rfc with 'list' command", ("Det g".to_u << 0x00e5 << "r inte att specificera b".to_u << 0x00e5 << "de -v och -rfc med 'list'-kommandot")]), Array.typed(Object).new(["Key password must be at least 6 characters", ("Nyckell".to_u << 0x00f6 << "senordet m".to_u << 0x00e5 << "ste inneh".to_u << 0x00e5 << "lla minst 6 tecken")]), Array.typed(Object).new(["New password must be at least 6 characters", ("Det nya l".to_u << 0x00f6 << "senordet m".to_u << 0x00e5 << "ste inneh".to_u << 0x00e5 << "lla minst 6 tecken")]), Array.typed(Object).new(["Keystore file exists, but is empty: ", ("Keystore-filen finns, men ".to_u << 0x00e4 << "r tom: ")]), Array.typed(Object).new(["Keystore file does not exist: ", "Keystore-filen finns inte: "]), Array.typed(Object).new(["Must specify destination alias", ("Du m".to_u << 0x00e5 << "ste ange destinations-alias")]), Array.typed(Object).new(["Must specify alias", ("Du m".to_u << 0x00e5 << "ste ange alias")]), Array.typed(Object).new(["Keystore password must be at least 6 characters", ("Keystore-l".to_u << 0x00f6 << "senordet m".to_u << 0x00e5 << "ste inneh".to_u << 0x00e5 << "lla minst 6 tecken")]), Array.typed(Object).new(["Enter keystore password:  ", ("Ange keystore-l".to_u << 0x00f6 << "senord:  ")]), Array.typed(Object).new(["Enter source keystore password:  ", ("Ange l".to_u << 0x00f6 << "senord f".to_u << 0x00f6 << "r k".to_u << 0x00e4 << "llnyckellagret:  ")]), Array.typed(Object).new(["Enter destination keystore password:  ", ("Ange destination f".to_u << 0x00f6 << "r nyckellagrets l".to_u << 0x00f6 << "senord:  ")]), Array.typed(Object).new(["Keystore password is too short - must be at least 6 characters", ("Keystore-l".to_u << 0x00f6 << "senordet ".to_u << 0x00e4 << "r f".to_u << 0x00f6 << "r kort - det m".to_u << 0x00e5 << "ste inneh".to_u << 0x00e5 << "lla minst 6 tecken")]), Array.typed(Object).new(["Unknown Entry Type", ("Ok".to_u << 0x00e4 << "nd posttyp")]), Array.typed(Object).new(["Too many failures. Alias not changed", ("Alias har inte ".to_u << 0x00e4 << "ndrats p.g.a. f".to_u << 0x00f6 << "r m".to_u << 0x00e5 << "nga fel.")]), Array.typed(Object).new(["Entry for alias <alias> successfully imported.", ("Posten f".to_u << 0x00f6 << "r alias {0} har importerats.")]), Array.typed(Object).new(["Entry for alias <alias> not imported.", ("Posten f".to_u << 0x00f6 << "r alias {0} har inte importerats.")]), Array.typed(Object).new(["Problem importing entry for alias <alias>: <exception>.\nEntry for alias <alias> not imported.", ("Ett problem uppstod vid importen av posten f".to_u << 0x00f6 << "r alias {0}: {1}.\nPosten har inte importerats.")]), Array.typed(Object).new(["Import command completed:  <ok> entries successfully imported, <fail> entries failed or cancelled", ("Kommandoimporten slutf".to_u << 0x00f6 << "rd: {0} poster har importerats, {1} poster var felaktiga eller utesl".to_u << 0x00f6 << "ts")]), Array.typed(Object).new(["Warning: Overwriting existing alias <alias> in destination keystore", ("Varning! Det befintliga aliaset {0} i m".to_u << 0x00e5 << "lnyckellagret skrivs ".to_u << 0x00f6 << "ver")]), Array.typed(Object).new(["Existing entry alias <alias> exists, overwrite? [no]:  ", ("Aliaset {0} finns redan. Vill du skriva ".to_u << 0x00f6 << "ver det? [no]:  ")]), Array.typed(Object).new(["Too many failures - try later", ("F".to_u << 0x00f6 << "r m".to_u << 0x00e5 << "nga fel - f".to_u << 0x00f6 << "rs".to_u << 0x00f6 << "k igen senare")]), Array.typed(Object).new(["Certification request stored in file <filename>", ("Certifikat-f".to_u << 0x00f6 << "rfr".to_u << 0x00e5 << "gan har lagrats i filen <{0}>")]), Array.typed(Object).new(["Submit this to your CA", "Skicka detta till din CA"]), Array.typed(Object).new(["if alias not specified, destalias, srckeypass, and destkeypass must not be specified", ("om n".to_u << 0x00e5 << "got alias inte anges f".to_u << 0x00e5 << "r destalias, srckeypass och destkeypass inte anges")]), Array.typed(Object).new(["Certificate stored in file <filename>", "Certifikatet har lagrats i filen <{0}>"]), Array.typed(Object).new(["Certificate reply was installed in keystore", "Certifikatsvaret har installerats i keystore-filen"]), Array.typed(Object).new(["Certificate reply was not installed in keystore", "Certifikatsvaret har inte installerats i keystore-filen"]), Array.typed(Object).new(["Certificate was added to keystore", "Certifikatet har lagts till i keystore-filen"]), Array.typed(Object).new(["Certificate was not added to keystore", "Certifikatet har inte lagts till i keystore-filen"]), Array.typed(Object).new(["[Storing ksfname]", "[Lagrar {0}]"]), Array.typed(Object).new(["alias has no public key (certificate)", "{0} saknar offentlig nyckel (certifikat)"]), Array.typed(Object).new(["Cannot derive signature algorithm", ("Det g".to_u << 0x00e5 << "r inte att h".to_u << 0x00e4 << "mta n".to_u << 0x00e5 << "gon signatur-algoritm")]), Array.typed(Object).new(["Alias <alias> does not exist", "Aliaset <{0}> finns inte"]), Array.typed(Object).new(["Alias <alias> has no certificate", "Aliaset <{0}> saknar certifikat"]), Array.typed(Object).new(["Key pair not generated, alias <alias> already exists", "Nyckelparet genererades inte. Aliaset <{0}> finns redan"]), Array.typed(Object).new(["Cannot derive signature algorithm", ("Det g".to_u << 0x00e5 << "r inte att h".to_u << 0x00e4 << "mta n".to_u << 0x00e5 << "gon signatur-algoritm")]), Array.typed(Object).new(["Generating keysize bit keyAlgName key pair and self-signed certificate (sigAlgName) with a validity of validality days\n\tfor: x500Name", ("Genererar {0}-bitars {1}-nyckelpar och sj".to_u << 0x00e4 << "lvsignerat certifikat ({2}) med en giltighet p".to_u << 0x00e5 << " {3} dagar\n\tf".to_u << 0x00f6 << "r: {4}")]), Array.typed(Object).new(["Enter key password for <alias>", ("Ange nyckell".to_u << 0x00f6 << "senord f".to_u << 0x00f6 << "r <{0}>")]), Array.typed(Object).new(["\t(RETURN if same as keystore password):  ", ("\t(RETURN om det ".to_u << 0x00e4 << "r identiskt med keystore-l".to_u << 0x00f6 << "senordet):  ")]), Array.typed(Object).new(["Key password is too short - must be at least 6 characters", ("Nyckell".to_u << 0x00f6 << "senordet ".to_u << 0x00e4 << "r f".to_u << 0x00f6 << "r kort - det m".to_u << 0x00e5 << "ste inneh".to_u << 0x00e5 << "lla minst 6 tecken")]), Array.typed(Object).new(["Too many failures - key not added to keystore", ("F".to_u << 0x00f6 << "r m".to_u << 0x00e5 << "nga fel - nyckeln lades inte till i keystore-filen")]), Array.typed(Object).new(["Destination alias <dest> already exists", "Destinationsaliaset <{0}> finns redan"]), Array.typed(Object).new(["Password is too short - must be at least 6 characters", ("L".to_u << 0x00f6 << "senordet ".to_u << 0x00e4 << "r f".to_u << 0x00f6 << "r kort - det m".to_u << 0x00e5 << "ste inneh".to_u << 0x00e5 << "lla minst 6 tecken")]), Array.typed(Object).new(["Too many failures. Key entry not cloned", ("F".to_u << 0x00f6 << "r m".to_u << 0x00e5 << "nga fel. Nyckelposten har inte klonats")]), Array.typed(Object).new(["key password for <alias>", ("nyckell".to_u << 0x00f6 << "senord f".to_u << 0x00f6 << "r <{0}>")]), Array.typed(Object).new(["Keystore entry for <id.getName()> already exists", ("Keystore-post f".to_u << 0x00f6 << "r <{0}> finns redan")]), Array.typed(Object).new(["Creating keystore entry for <id.getName()> ...", ("Skapar keystore-post f".to_u << 0x00f6 << "r <{0}> ...")]), Array.typed(Object).new(["No entries from identity database added", ("Inga poster fr".to_u << 0x00e5 << "n identitetsdatabasen har lagts till")]), Array.typed(Object).new(["Alias name: alias", "Aliasnamn: {0}"]), Array.typed(Object).new(["Creation date: keyStore.getCreationDate(alias)", "Skapat den: {0,date}"]), Array.typed(Object).new(["alias, keyStore.getCreationDate(alias), ", "{0}, {1,date}, "]), Array.typed(Object).new(["alias, ", "{0}, "]), Array.typed(Object).new(["Entry type: <type>", "Posttyp: {0}"]), Array.typed(Object).new(["Certificate chain length: ", ("L".to_u << 0x00e4 << "ngd p".to_u << 0x00e5 << " certifikatskedja: ")]), Array.typed(Object).new(["Certificate[(i + 1)]:", "Certifikat[{0,number,integer}]:"]), Array.typed(Object).new(["Certificate fingerprint (MD5): ", "Certifikatsfingeravtryck (MD5): "]), Array.typed(Object).new(["Entry type: trustedCertEntry\n", "Posttyp: trustedCertEntry\n"]), Array.typed(Object).new(["trustedCertEntry,", "trustedCertEntry,"]), Array.typed(Object).new(["Keystore type: ", "Keystore-typ: "]), Array.typed(Object).new(["Keystore provider: ", ("Keystore-leverant".to_u << 0x00f6 << "r: ")]), Array.typed(Object).new(["Your keystore contains keyStore.size() entry", ("Din keystore inneh".to_u << 0x00e5 << "ller en {0,number,integer} post")]), Array.typed(Object).new(["Your keystore contains keyStore.size() entries", ("Din keystore inneh".to_u << 0x00e5 << "ller {0,number,integer} poster")]), Array.typed(Object).new(["Failed to parse input", ("Det g".to_u << 0x00e5 << "r inte att analysera indata")]), Array.typed(Object).new(["Empty input", "Inga indata"]), Array.typed(Object).new(["Not X.509 certificate", "Inte ett X.509-certifikat"]), Array.typed(Object).new(["Cannot derive signature algorithm", ("Det g".to_u << 0x00e5 << "r inte att h".to_u << 0x00e4 << "mta n".to_u << 0x00e5 << "gon signatur-algoritm")]), Array.typed(Object).new(["alias has no public key", "{0} saknar offentlig nyckel"]), Array.typed(Object).new(["alias has no X.509 certificate", "{0} saknar X.509-certifikat"]), Array.typed(Object).new(["New certificate (self-signed):", ("Nytt certifikat (sj".to_u << 0x00e4 << "lvsignerat):")]), Array.typed(Object).new(["Reply has no certificates", "Svaret saknar certifikat"]), Array.typed(Object).new(["Certificate not imported, alias <alias> already exists", "Certifikatet importerades inte. Aliaset <{0}> finns redan"]), Array.typed(Object).new(["Input not an X.509 certificate", ("Indata ".to_u << 0x00e4 << "r inte ett X.509-certifikat")]), Array.typed(Object).new(["Certificate already exists in keystore under alias <trustalias>", "Certifikatet finns redan i keystore-filen under aliaset <{0}>"]), Array.typed(Object).new(["Do you still want to add it? [no]:  ", ("Vill du fortfarande l".to_u << 0x00e4 << "gga till det? [nej]:  ")]), Array.typed(Object).new(["Certificate already exists in system-wide CA keystore under alias <trustalias>", "Certifikatet finns redan i systemkeystore-filen under aliaset <{0}>"]), Array.typed(Object).new(["Do you still want to add it to your own keystore? [no]:  ", ("Vill du fortfarande l".to_u << 0x00e4 << "gga till det i din egen keystore-fil? [nej]:  ")]), Array.typed(Object).new(["Trust this certificate? [no]:  ", ("Betror du det h".to_u << 0x00e4 << "r certifikatet? [nej]:  ")]), Array.typed(Object).new(["YES", "JA"]), Array.typed(Object).new(["New prompt: ", "Nytt {0}: "]), Array.typed(Object).new(["Passwords must differ", ("L".to_u << 0x00f6 << "senorden m".to_u << 0x00e5 << "ste vara olika")]), Array.typed(Object).new(["Re-enter new prompt: ", "Ange nytt {0} igen: "]), Array.typed(Object).new(["Re-enter new password: ", ("Ange det nya l".to_u << 0x00f6 << "senordet igen: ")]), Array.typed(Object).new(["They don't match. Try again", ("De matchar inte. F".to_u << 0x00f6 << "rs".to_u << 0x00f6 << "k igen")]), Array.typed(Object).new(["Enter prompt alias name:  ", "Ange {0}-aliasnamn:  "]), Array.typed(Object).new(["Enter new alias name\t(RETURN to cancel import for this entry):  ", ("Ange ett nytt aliasnamn\t(skriv RETURN f".to_u << 0x00f6 << "r att avbryta importen av denna post):  ")]), Array.typed(Object).new(["Enter alias name:  ", "Ange aliasnamn:  "]), Array.typed(Object).new(["\t(RETURN if same as for <otherAlias>)", ("\t(RETURN om det ".to_u << 0x00e4 << "r det samma som f".to_u << 0x00f6 << "r <{0}>)")]), Array.typed(Object).new(["*PATTERN* printX509Cert", ("".to_u << 0x00c4 << "gare: {0}\nUtf".to_u << 0x00e4 << "rdare: {1}\nSerienummer: {2}\nGiltigt fr".to_u << 0x00e5 << "n: {3} till: {4}\nCertifikatfingeravtryck:\n\t MD5: {5}\n\t SHA1: {6}\n\t Signaturalgoritm: {7}\n\t Version: {8}")]), Array.typed(Object).new(["What is your first and last name?", ("Vad heter du i f".to_u << 0x00f6 << "r- och efternamn?")]), Array.typed(Object).new(["What is the name of your organizational unit?", "Vad heter din avdelning inom organisationen?"]), Array.typed(Object).new(["What is the name of your organization?", "Vad heter din organisation?"]), Array.typed(Object).new(["What is the name of your City or Locality?", "Vad heter din ort eller plats?"]), Array.typed(Object).new(["What is the name of your State or Province?", "Vad heter ditt land eller din provins?"]), Array.typed(Object).new(["What is the two-letter country code for this unit?", ("Vilken ".to_u << 0x00e4 << "r den tv".to_u << 0x00e5 << "st".to_u << 0x00e4 << "lliga landskoden?")]), Array.typed(Object).new(["Is <name> correct?", ("".to_u << 0x00c4 << "r {0} korrekt?")]), Array.typed(Object).new(["no", "nej"]), Array.typed(Object).new(["yes", "ja"]), Array.typed(Object).new(["y", "j"]), Array.typed(Object).new(["  [defaultValue]:  ", "  [{0}]:  "]), Array.typed(Object).new(["Alias <alias> has no key", "Aliaset <{0}> saknar nyckel"]), Array.typed(Object).new(["Alias <alias> references an entry type that is not a private key entry.  The -keyclone command only supports cloning of private key entries", ("Aliaset <{0}> h".to_u << 0x00e4 << "nvisar till en posttyp som inte ".to_u << 0x00e4 << "r n".to_u << 0x00e5 << "gon privat nyckelpost. Kommandot -keyclone har endast st".to_u << 0x00f6 << "d f".to_u << 0x00f6 << "r kloning av privata nyckelposter")]), Array.typed(Object).new(["*****************  WARNING WARNING WARNING  *****************", "*****************  VARNING VARNING VARNING  *****************"]), Array.typed(Object).new(["* The integrity of the information stored in your keystore  *", ("* Integriteten betr".to_u << 0x00e4 << "ffande den information som lagras i keystore-filen  *")]), Array.typed(Object).new(["* The integrity of the information stored in the srckeystore*", ("* Integriteten f".to_u << 0x00f6 << "r informationen som lagras i srckeystore*")]), Array.typed(Object).new(["* has NOT been verified!  In order to verify its integrity, *", "* har INTE verifierats!  Om du vill verifiera dess integritet, *"]), Array.typed(Object).new(["* you must provide your keystore password.                  *", ("* m".to_u << 0x00e5 << "ste du tillhandah".to_u << 0x00e5 << "lla ditt keystore-l".to_u << 0x00f6 << "senord.                  *")]), Array.typed(Object).new(["* you must provide the srckeystore password.                *", ("* du m".to_u << 0x00e5 << "ste ange l".to_u << 0x00f6 << "senordet f".to_u << 0x00f6 << "r srckeystore.                *")]), Array.typed(Object).new(["Certificate reply does not contain public key for <alias>", ("Certifikatsvaret inneh".to_u << 0x00e5 << "ller inte n".to_u << 0x00e5 << "gon offentlig nyckel f".to_u << 0x00f6 << "r <{0}>")]), Array.typed(Object).new(["Incomplete certificate chain in reply", ("Ofullst".to_u << 0x00e4 << "ndig certifikatskedja i svaret")]), Array.typed(Object).new(["Certificate chain in reply does not verify: ", ("Certifikatskedjan i svaret g".to_u << 0x00e5 << "r inte att verifiera: ")]), Array.typed(Object).new(["Top-level certificate in reply:\n", ("Toppniv".to_u << 0x00e5 << "certifikatet i svaret:\n")]), Array.typed(Object).new(["... is not trusted. ", ("... ".to_u << 0x00e4 << "r inte betrott. ")]), Array.typed(Object).new(["Install reply anyway? [no]:  ", ("Vill du installera svaret ".to_u << 0x00e4 << "nd".to_u << 0x00e5 << "? [nej]:  ")]), Array.typed(Object).new(["NO", "NEJ"]), Array.typed(Object).new(["Public keys in reply and keystore don't match", "De offentliga nycklarna i svaret och keystore-filen matchar inte varandra"]), Array.typed(Object).new(["Certificate reply and certificate in keystore are identical", ("Certifikatssvaret och certifikatet i keystore-filen ".to_u << 0x00e4 << "r identiska")]), Array.typed(Object).new(["Failed to establish chain from reply", ("Det gick inte att uppr".to_u << 0x00e4 << "tta n".to_u << 0x00e5 << "gon kedja ur svaret")]), Array.typed(Object).new(["n", "n"]), Array.typed(Object).new(["Wrong answer, try again", ("Fel svar. F".to_u << 0x00f6 << "rs".to_u << 0x00f6 << "k p".to_u << 0x00e5 << " nytt.")]), Array.typed(Object).new(["Secret key not generated, alias <alias> already exists", "Den hemliga nyckeln har inte genererats eftersom aliaset <{0}> redan finns"]), Array.typed(Object).new(["Please provide -keysize for secret key generation", ("Ange -keysize f".to_u << 0x00f6 << "r skapande av hemlig nyckel")]), Array.typed(Object).new(["keytool usage:\n", "nyckelverktyg:\n"]), Array.typed(Object).new(["Extensions: ", ("Filtill".to_u << 0x00e4 << "gg: ")]), Array.typed(Object).new(["-certreq     [-v] [-protected]", "-certreq     [-v] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>] [-sigalg <sigalg>]", "\t     [-alias <alias>] [-sigalg <signaturalgoritm>]"]), Array.typed(Object).new(["\t     [-file <csr_file>] [-keypass <keypass>]", ("\t     [-file <csr_fil>] [-keypass <nyckell".to_u << 0x00f6 << "senord>]")]), Array.typed(Object).new(["\t     [-keystore <keystore>] [-storepass <storepass>]", ("\t     [-keystore <keystore>] [-storepass <lagringsl".to_u << 0x00f6 << "senord>]")]), Array.typed(Object).new(["\t     [-storetype <storetype>] [-providername <name>]", "\t     [-storetype <storetype>] [-providername <name>]"]), Array.typed(Object).new(["\t     [-providerclass <provider_class_name> [-providerarg <arg>]] ...", "\t     [-providerclass <provider_class_name> [-providerarg <arg>]] ..."]), Array.typed(Object).new(["\t     [-providerpath <pathlist>]", "\t     [-providerpath <pathlist>]"]), Array.typed(Object).new(["-delete      [-v] [-protected] -alias <alias>", "-delete      [-v] [-protected] -alias <alias>"]), Array.typed(Object).new(["-exportcert  [-v] [-rfc] [-protected]", "-exportcert  [-v] [-rfc] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>] [-file <cert_file>]", "\t     [-alias <alias>] [-file <certifikatsfil>]"]), Array.typed(Object).new(["-genkeypair  [-v] [-protected]", "-genkeypair  [-v] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <alias>]"]), Array.typed(Object).new(["\t     [-keyalg <keyalg>] [-keysize <keysize>]", "\t     [-keyalg <nyckelalgoritm>] [-keysize <nyckelstorlek>]"]), Array.typed(Object).new(["\t     [-sigalg <sigalg>] [-dname <dname>]", "\t     [-sigalg <signaturalgoritm>] [-dname <dnamn>]"]), Array.typed(Object).new(["\t     [-validity <valDays>] [-keypass <keypass>]", ("\t     [-validity <dagar>] [-keypass <nyckell".to_u << 0x00f6 << "senord>]")]), Array.typed(Object).new(["-genseckey   [-v] [-protected]", "-genseckey   [-v] [-protected]"]), Array.typed(Object).new(["-help", "-help"]), Array.typed(Object).new(["-importcert  [-v] [-noprompt] [-trustcacerts] [-protected]", "-importcert  [-v] [-noprompt] [-trustcacerts] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <alias>]"]), Array.typed(Object).new(["\t     [-alias <alias>] [-keypass <keypass>]", "\t     [-alias <alias>] [-keypass <keypass>]"]), Array.typed(Object).new(["\t     [-file <cert_file>] [-keypass <keypass>]", ("\t     [-file <certifikatsfil>] [-keypass <nyckell".to_u << 0x00f6 << "senord>]")]), Array.typed(Object).new(["-importkeystore [-v] ", "-importkeystore [-v] "]), Array.typed(Object).new(["\t     [-srckeystore <srckeystore>] [-destkeystore <destkeystore>]", "\t     [-srckeystore <srckeystore>] [-destkeystore <destkeystore>]"]), Array.typed(Object).new(["\t     [-srcstoretype <srcstoretype>] [-deststoretype <deststoretype>]", "\t     [-srcstoretype <srcstoretype>] [-deststoretype <deststoretype>]"]), Array.typed(Object).new(["\t     [-srcprotected] [-destprotected]", "\t     [-srcprotected] [-destprotected]"]), Array.typed(Object).new(["\t     [-srcstorepass <srcstorepass>] [-deststorepass <deststorepass>]", "\t     [-srcstorepass <srcstorepass>] [-deststorepass <deststorepass>]"]), Array.typed(Object).new(["\t     [-srcprovidername <srcprovidername>]\n\t     [-destprovidername <destprovidername>]", "\t     [-srcprovidername <srcprovidername>]\n\t     [-destprovidername <destprovidername>]"]), Array.typed(Object).new(["\t     [-srcalias <srcalias> [-destalias <destalias>]", "\t     [-srcalias <srcalias> [-destalias <destalias>]"]), Array.typed(Object).new(["\t       [-srckeypass <srckeypass>] [-destkeypass <destkeypass>]]", "\t       [-srckeypass <srckeypass>] [-destkeypass <destkeypass>]]"]), Array.typed(Object).new(["\t     [-noprompt]", "\t     [-noprompt]"]), Array.typed(Object).new(["-changealias [-v] [-protected] -alias <alias> -destalias <destalias>", "-changealias [-v] [-protected] -alias <alias> -destalias <destalias>"]), Array.typed(Object).new(["\t     [-keypass <keypass>]", "\t     [-keypass <keypass>]"]), Array.typed(Object).new(["-keypasswd   [-v] [-alias <alias>]", "-keypasswd   [-v] [-alias <alias>]"]), Array.typed(Object).new(["\t     [-keypass <old_keypass>] [-new <new_keypass>]", ("\t     [-keypass <gammalt_nyckell".to_u << 0x00f6 << "senord>] [-new <nytt_nyckell".to_u << 0x00f6 << "senord>]")]), Array.typed(Object).new(["-list        [-v | -rfc] [-protected]", "-list        [-v | -rfc] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <alias>]"]), Array.typed(Object).new(["-printcert   [-v] [-file <cert_file>]", "-printcert   [-v] [-file <certifikatsfil>]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <alias>]"]), Array.typed(Object).new(["-storepasswd [-v] [-new <new_storepass>]", ("-storepasswd [-v] [-new <nytt_lagringsl".to_u << 0x00f6 << "senord>]")]), Array.typed(Object).new(["Warning: A public key for alias 'signers[i]' does not exist.  Make sure a KeyStore is properly configured.", ("Varning! Det finns ingen offentlig nyckel f".to_u << 0x00f6 << "r aliaset {0}. Kontrollera att det aktuella nyckellagret ".to_u << 0x00e4 << "r korrekt konfigurerat.")]), Array.typed(Object).new(["Warning: Class not found: class", "Varning! Klassen hittades inte: {0}"]), Array.typed(Object).new(["Warning: Invalid argument(s) for constructor: arg", ("Varning! Ogiltigt/Ogiltiga argument f".to_u << 0x00f6 << "r konstrukt".to_u << 0x00f6 << "r: {0}")]), Array.typed(Object).new(["Illegal Principal Type: type", "Ogiltig huvudtyp: {0}"]), Array.typed(Object).new(["Illegal option: option", "Ogiltigt alternativ: {0}"]), Array.typed(Object).new(["Usage: policytool [options]", ("G".to_u << 0x00f6 << "r s".to_u << 0x00e5 << " h".to_u << 0x00e4 << "r: policytool [alternativ]")]), Array.typed(Object).new(["  [-file <file>]    policy file location", "  [-file <fil>]    policyfilens plats"]), Array.typed(Object).new(["New", "Nytt"]), Array.typed(Object).new(["Open", ("".to_u << 0x00d6 << "ppna")]), Array.typed(Object).new(["Save", "Spara"]), Array.typed(Object).new(["Save As", "Spara som"]), Array.typed(Object).new(["View Warning Log", "Visa varningslogg"]), Array.typed(Object).new(["Exit", "Avsluta"]), Array.typed(Object).new(["Add Policy Entry", ("L".to_u << 0x00e4 << "gg till policypost")]), Array.typed(Object).new(["Edit Policy Entry", "Redigera policypost"]), Array.typed(Object).new(["Remove Policy Entry", "Ta bort policypost"]), Array.typed(Object).new(["Edit", "Redigera"]), Array.typed(Object).new(["Retain", ("Beh".to_u << 0x00e5 << "ll")]), Array.typed(Object).new(["Warning: File name may include escaped backslash characters. " + "It is not necessary to escape backslash characters " + "(the tool escapes characters as necessary when writing " + "the policy contents to the persistent store).\n\n" + "Click on Retain to retain the entered name, or click on " + "Edit to edit the name.", "Warning: File name may include escaped backslash characters. " + "It is not necessary to escape backslash characters " + "(the tool escapes characters as necessary when writing " + "the policy contents to the persistent store).\n\n" + "Click on Retain to retain the entered name, or click on " + "Edit to edit the name."]), Array.typed(Object).new(["Add Public Key Alias", ("L".to_u << 0x00e4 << "gg till offentligt nyckelalias")]), Array.typed(Object).new(["Remove Public Key Alias", "Ta bort offentligt nyckelalias"]), Array.typed(Object).new(["File", "Arkiv"]), Array.typed(Object).new(["KeyStore", "Nyckellager"]), Array.typed(Object).new(["Policy File:", "Policyfil:"]), Array.typed(Object).new(["Could not open policy file: policyFile: e.toString()", ("Det g".to_u << 0x00e5 << "r inte att ".to_u << 0x00f6 << "ppna policyfilen: {0}: {1}")]), Array.typed(Object).new(["Policy Tool", "Policyverktyg"]), Array.typed(Object).new(["Errors have occurred while opening the policy configuration.  View the Warning Log for more information.", ("Det uppstod ett fel n".to_u << 0x00e4 << "r policykonfigurationen skulle ".to_u << 0x00f6 << "ppnas.  Visa varningsloggen med ytterligare information.")]), Array.typed(Object).new(["Error", "Fel"]), Array.typed(Object).new(["OK", "OK"]), Array.typed(Object).new(["Status", "Status"]), Array.typed(Object).new(["Warning", "Varning"]), Array.typed(Object).new(["Permission:                                                       ", ("Beh".to_u << 0x00f6 << "righet:                                                       ")]), Array.typed(Object).new(["Principal Type:", "Principaltyp:"]), Array.typed(Object).new(["Principal Name:", "Principalnamn:"]), Array.typed(Object).new(["Target Name:                                                    ", ("M".to_u << 0x00e5 << "lets namn:                                                    ")]), Array.typed(Object).new(["Actions:                                                             ", "Funktioner:                                                             "]), Array.typed(Object).new(["OK to overwrite existing file filename?", ("Ska den befintliga filen {0} skrivas ".to_u << 0x00f6 << "ver?")]), Array.typed(Object).new(["Cancel", "Avbryt"]), Array.typed(Object).new(["CodeBase:", "CodeBase:"]), Array.typed(Object).new(["SignedBy:", "SignedBy:"]), Array.typed(Object).new(["Add Principal", ("L".to_u << 0x00e4 << "gg till principal")]), Array.typed(Object).new(["Edit Principal", "Redigera principal"]), Array.typed(Object).new(["Remove Principal", "Ta bort principal"]), Array.typed(Object).new(["Principals:", "Principaler:"]), Array.typed(Object).new(["  Add Permission", ("  L".to_u << 0x00e4 << "gg till beh".to_u << 0x00f6 << "righet")]), Array.typed(Object).new(["  Edit Permission", ("  Redigera beh".to_u << 0x00f6 << "righet")]), Array.typed(Object).new(["Remove Permission", ("Ta bort beh".to_u << 0x00f6 << "righet")]), Array.typed(Object).new(["Done", "Klar"]), Array.typed(Object).new(["KeyStore URL:", ("Webbadress f".to_u << 0x00f6 << "r nyckellager:")]), Array.typed(Object).new(["KeyStore Type:", "Nyckellagertyp:"]), Array.typed(Object).new(["KeyStore Provider:", ("Nyckellagerleverant".to_u << 0x00f6 << "r:")]), Array.typed(Object).new(["KeyStore Password URL:", ("Webbadress f".to_u << 0x00f6 << "r l".to_u << 0x00f6 << "senord till nyckellager:")]), Array.typed(Object).new(["Principals", "Principaler"]), Array.typed(Object).new(["  Edit Principal:", "  Redigera principal:"]), Array.typed(Object).new(["  Add New Principal:", ("  L".to_u << 0x00e4 << "gg till ny principal:")]), Array.typed(Object).new(["Permissions", ("Beh".to_u << 0x00f6 << "righet")]), Array.typed(Object).new(["  Edit Permission:", ("  Redigera beh".to_u << 0x00f6 << "righet:")]), Array.typed(Object).new(["  Add New Permission:", ("  L".to_u << 0x00e4 << "gg till ny beh".to_u << 0x00f6 << "righet:")]), Array.typed(Object).new(["Signed By:", "Signerad av:"]), Array.typed(Object).new(["Cannot Specify Principal with a Wildcard Class without a Wildcard Name", ("Det g".to_u << 0x00e5 << "r inte att specificera principal med wildcard-klass utan wildcard-namn")]), Array.typed(Object).new(["Cannot Specify Principal without a Name", ("Det g".to_u << 0x00e5 << "r inte att specificera principal utan namn")]), Array.typed(Object).new(["Permission and Target Name must have a value", ("Beh".to_u << 0x00f6 << "righet och m".to_u << 0x00e5 << "lnamn m".to_u << 0x00e5 << "ste ha ett v".to_u << 0x00e4 << "rde")]), Array.typed(Object).new(["Remove this Policy Entry?", ("Vill du ta bort den h".to_u << 0x00e4 << "r policyposten?")]), Array.typed(Object).new(["Overwrite File", ("Skriva ".to_u << 0x00f6 << "ver fil")]), Array.typed(Object).new(["Policy successfully written to filename", "Policy har skrivits till {0}"]), Array.typed(Object).new(["null filename", "nullfilnamn"]), Array.typed(Object).new(["Save changes?", ("Vill du spara ".to_u << 0x00e4 << "ndringarna?")]), Array.typed(Object).new(["Yes", "Ja"]), Array.typed(Object).new(["No", "Nej"]), Array.typed(Object).new(["Policy Entry", "Policyfel"]), Array.typed(Object).new(["Save Changes", ("Vill du spara ".to_u << 0x00e4 << "ndringarna?")]), Array.typed(Object).new(["No Policy Entry selected", ("N".to_u << 0x00e5 << "gon policypost har inte markerats")]), Array.typed(Object).new(["Unable to open KeyStore: ex.toString()", ("Det g".to_u << 0x00e5 << "r inte att ".to_u << 0x00f6 << "ppna nyckellagret: {0}")]), Array.typed(Object).new(["No principal selected", "Ingen principal har markerats"]), Array.typed(Object).new(["No permission selected", ("N".to_u << 0x00e5 << "gon beh".to_u << 0x00f6 << "righet har inte markerats")]), Array.typed(Object).new(["name", "namn"]), Array.typed(Object).new(["configuration type", "konfigurationstyp"]), Array.typed(Object).new(["environment variable name", ("variabelnamn f".to_u << 0x00f6 << "r milj".to_u << 0x00f6 << "")]), Array.typed(Object).new(["library name", "biblioteksnamn"]), Array.typed(Object).new(["package name", "paketnamn"]), Array.typed(Object).new(["policy type", "policytyp"]), Array.typed(Object).new(["property name", "egenskapsnamn"]), Array.typed(Object).new(["provider name", ("leverant".to_u << 0x00f6 << "rsnamn")]), Array.typed(Object).new(["Principal List", "Huvudlista"]), Array.typed(Object).new(["Permission List", ("Beh".to_u << 0x00f6 << "righetslista")]), Array.typed(Object).new(["Code Base", "Kodbas"]), Array.typed(Object).new(["KeyStore U R L:", ("Webbadress f".to_u << 0x00f6 << "r nyckellager:")]), Array.typed(Object).new(["KeyStore Password U R L:", ("Webbadress f".to_u << 0x00f6 << "r l".to_u << 0x00f6 << "senord till nyckellager:")]), Array.typed(Object).new(["invalid null input(s)", "ogiltiga null-indata"]), Array.typed(Object).new(["actions can only be 'read'", ("funktioner kan endast 'l".to_u << 0x00e4 << "sas'")]), Array.typed(Object).new(["permission name [name] syntax invalid: ", ("syntaxen f".to_u << 0x00f6 << "r beh".to_u << 0x00f6 << "righetsnamnet [{0}] ".to_u << 0x00e4 << "r ogiltig: ")]), Array.typed(Object).new(["Credential Class not followed by a Principal Class and Name", ("Kreditivklassen f".to_u << 0x00f6 << "ljs inte av principalklass eller principalnamn")]), Array.typed(Object).new(["Principal Class not followed by a Principal Name", ("Principalklassen f".to_u << 0x00f6 << "ljs inte av n".to_u << 0x00e5 << "got principalnamn")]), Array.typed(Object).new(["Principal Name must be surrounded by quotes", ("Principalnamnet m".to_u << 0x00e5 << "ste anges inom citattecken")]), Array.typed(Object).new(["Principal Name missing end quote", "Principalnamnet saknar avslutande citattecken"]), Array.typed(Object).new(["PrivateCredentialPermission Principal Class can not be a wildcard (*) value if Principal Name is not a wildcard (*) value", ("V".to_u << 0x00e4 << "rdet f".to_u << 0x00f6 << "r principalklassen PrivateCredentialPermission kan inte ha n".to_u << 0x00e5 << "got jokertecken (*) om principalnamnet inte anges med jokertecken (*)")]), Array.typed(Object).new(["CredOwner:\n\tPrincipal Class = class\n\tPrincipal Name = name", "CredOwner:\n\tPrincipalklass = {0}\n\tPrincipalnamn = {1}"]), Array.typed(Object).new(["provided null name", "gav null-namn"]), Array.typed(Object).new(["provided null keyword map", ("nullnyckelordsmappning tillhandah".to_u << 0x00f6 << "lls")]), Array.typed(Object).new(["provided null OID map", ("null-OID-mappning tillhandah".to_u << 0x00f6 << "lls")]), Array.typed(Object).new(["invalid null AccessControlContext provided", "ogiltigt null-AccessControlContext"]), Array.typed(Object).new(["invalid null action provided", "ogiltig null-funktion"]), Array.typed(Object).new(["invalid null Class provided", "ogiltig null-klass"]), Array.typed(Object).new(["Subject:\n", ("".to_u << 0x00c4 << "rende:\n")]), Array.typed(Object).new(["\tPrincipal: ", "\tPrincipal: "]), Array.typed(Object).new(["\tPublic Credential: ", "\tOffentligt kreditiv: "]), Array.typed(Object).new(["\tPrivate Credentials inaccessible\n", ("\tPrivata kreditiv ".to_u << 0x00e4 << "r otillg".to_u << 0x00e4 << "ngliga\n")]), Array.typed(Object).new(["\tPrivate Credential: ", "\tPrivata kreditiv: "]), Array.typed(Object).new(["\tPrivate Credential inaccessible\n", ("\tPrivata kreditiv ".to_u << 0x00e4 << "r otillg".to_u << 0x00e4 << "ngliga\n")]), Array.typed(Object).new(["Subject is read-only", ("".to_u << 0x00c4 << "mnet ".to_u << 0x00e4 << "r skrivskyddat")]), Array.typed(Object).new(["attempting to add an object which is not an instance of java.security.Principal to a Subject's Principal Set", ("f".to_u << 0x00f6 << "rs".to_u << 0x00f6 << "k att l".to_u << 0x00e4 << "gga till ett objekt som inte ".to_u << 0x00e4 << "r en f".to_u << 0x00f6 << "rekomst av java.security.Principal till en principalupps".to_u << 0x00e4 << "ttning")]), Array.typed(Object).new(["attempting to add an object which is not an instance of class", ("f".to_u << 0x00f6 << "rs".to_u << 0x00f6 << "ker l".to_u << 0x00e4 << "gga till ett objekt som inte ".to_u << 0x00e4 << "r en f".to_u << 0x00f6 << "rekomst av {0}")]), Array.typed(Object).new(["LoginModuleControlFlag: ", "LoginModuleControlFlag: "]), Array.typed(Object).new(["Invalid null input: name", "Ogiltiga null-indata: namn"]), Array.typed(Object).new(["No LoginModules configured for name", ("Inga inloggningsmoduler har konfigurerats f".to_u << 0x00f6 << "r {0}")]), Array.typed(Object).new(["invalid null Subject provided", "ogiltigt null-Subject"]), Array.typed(Object).new(["invalid null CallbackHandler provided", "ogiltig null-CallbackHandler"]), Array.typed(Object).new(["null subject - logout called before login", ("null-subject - utloggning anropades f".to_u << 0x00f6 << "re inloggning")]), Array.typed(Object).new(["unable to instantiate LoginModule, module, because it does not provide a no-argument constructor", ("det g".to_u << 0x00e5 << "r inta att representera LoginModule, {0}, eftersom den inte tillhandah".to_u << 0x00e5 << "ller n".to_u << 0x00e5 << "gon argumentfri konstruktion")]), Array.typed(Object).new(["unable to instantiate LoginModule", ("det g".to_u << 0x00e5 << "r inte att representera LoginModule")]), Array.typed(Object).new(["unable to instantiate LoginModule: ", "inloggningsmodulen kan inte skapas: "]), Array.typed(Object).new(["unable to find LoginModule class: ", ("det g".to_u << 0x00e5 << "r inte att hitta LoginModule-klassen: ")]), Array.typed(Object).new(["unable to access LoginModule: ", ("det g".to_u << 0x00e5 << "r inte att komma ".to_u << 0x00e5 << "t LoginModule: ")]), Array.typed(Object).new(["Login Failure: all modules ignored", "Inloggningsfel: alla moduler ignoreras"]), Array.typed(Object).new(["java.security.policy: error parsing policy:\n\tmessage", "java.security.policy: fel vid analys av {0}:\n\t{1}"]), Array.typed(Object).new(["java.security.policy: error adding Permission, perm:\n\tmessage", ("java.security.policy: fel vid till".to_u << 0x00e4 << "gg av beh".to_u << 0x00f6 << "righet, {0}:\n\t{1}")]), Array.typed(Object).new(["java.security.policy: error adding Entry:\n\tmessage", ("java.security.policy: fel vid till".to_u << 0x00e4 << "gg av post:\n\t{0}")]), Array.typed(Object).new(["alias name not provided (pe.name)", "aliasnamn ej angivet ({0})"]), Array.typed(Object).new(["unable to perform substitution on alias, suffix", ("kan ej ers".to_u << 0x00e4 << "tta aliasnamn, {0}")]), Array.typed(Object).new(["substitution value, prefix, unsupported", ("ers".to_u << 0x00e4 << "ttningsv".to_u << 0x00e4 << "rde, {0}, st".to_u << 0x00f6 << "ds ej")]), Array.typed(Object).new(["(", "("]), Array.typed(Object).new([")", ")"]), Array.typed(Object).new(["type can't be null", "typen kan inte vara null"]), Array.typed(Object).new(["keystorePasswordURL can not be specified without also specifying keystore", ("det g".to_u << 0x00e5 << "r inte att ange keystorePasswordURL utan att ange keystore")]), Array.typed(Object).new(["expected keystore type", ("f".to_u << 0x00f6 << "rv".to_u << 0x00e4 << "ntad keystore-typ")]), Array.typed(Object).new(["expected keystore provider", ("keystore-leverant".to_u << 0x00f6 << "r f".to_u << 0x00f6 << "rv".to_u << 0x00e4 << "ntades")]), Array.typed(Object).new(["multiple Codebase expressions", "flera Codebase-uttryck"]), Array.typed(Object).new(["multiple SignedBy expressions", "flera SignedBy-uttryck"]), Array.typed(Object).new(["SignedBy has empty alias", "SignedBy har ett tomt alias"]), Array.typed(Object).new(["can not specify Principal with a wildcard class without a wildcard name", ("Det g".to_u << 0x00e5 << "r inte att specificera principal genom att ange jokertecken f".to_u << 0x00f6 << "r klass utan att samtidigt ange jokertecken f".to_u << 0x00f6 << "r namn")]), Array.typed(Object).new(["expected codeBase or SignedBy or Principal", ("f".to_u << 0x00f6 << "rv".to_u << 0x00e4 << "ntad codeBase eller SignedBy eller Principal")]), Array.typed(Object).new(["expected permission entry", ("f".to_u << 0x00f6 << "rv".to_u << 0x00e4 << "ntade beh".to_u << 0x00f6 << "righetspost")]), Array.typed(Object).new(["number ", "antal "]), Array.typed(Object).new(["expected [expect], read [end of file]", ("f".to_u << 0x00f6 << "rv".to_u << 0x00e4 << "ntade [{0}], l".to_u << 0x00e4 << "ste [end of file]")]), Array.typed(Object).new(["expected [;], read [end of file]", ("f".to_u << 0x00f6 << "rv".to_u << 0x00e4 << "ntade [;], l".to_u << 0x00e4 << "ste [end of file]")]), Array.typed(Object).new(["line number: msg", "rad {0}: {1}"]), Array.typed(Object).new(["line number: expected [expect], found [actual]", ("rad {0}: f".to_u << 0x00f6 << "rv".to_u << 0x00e4 << "ntade [{1}], hittade [{2}]")]), Array.typed(Object).new(["null principalClass or principalName", "null-principalClass eller -principalName"]), Array.typed(Object).new(["PKCS11 Token [providerName] Password: ", ("PKCS11-pollett [{0}] L".to_u << 0x00f6 << "senord: ")]), Array.typed(Object).new(["unable to instantiate Subject-based policy", "den Subject-baserade policyn kan inte skapas"])]) }
      const_attr_reader  :Contents
    }
    
    typesig { [] }
    # 
    # Returns the contents of this <code>ResourceBundle</code>.
    # 
    # <p>
    # 
    # @return the contents of this <code>ResourceBundle</code>.
    def get_contents
      return Contents
    end
    
    typesig { [] }
    def initialize
      super()
    end
    
    private
    alias_method :initialize__resources_sv, :initialize
  end
  
end
