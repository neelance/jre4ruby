require "rjava"

# Copyright 2000-2005 Sun Microsystems, Inc.  All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
# 
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the LICENSE file that accompanied this code.
# 
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
# 
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
# 
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
# CA 95054 USA or visit www.sun.com if you need additional information or
# have any questions.
module Sun::Security::Util
  module ResourcesImports #:nodoc:
    class_module.module_eval {
      include ::Java::Lang
      include ::Sun::Security::Util
    }
  end
  
  # <p> This class represents the <code>ResourceBundle</code>
  # for javax.security.auth and sun.security.
  class Resources < Java::Util::ListResourceBundle
    include_class_members ResourcesImports
    
    class_module.module_eval {
      # shared (from jarsigner)
      # shared (from keytool)
      # keytool
      # Translators of the following 5 pairs, ATTENTION:
      # the next 5 string pairs are meant to be combined into 2 paragraphs,
      # 1+3+4 and 2+3+5. make sure your translation also does.
      # rest is same as -certreq starting from -keystore *
      # {"-export      [-v] [-rfc] [-protected]",
      # "-export      [-v] [-rfc] [-protected]"},
      # rest is same as -certreq starting from -keystore *
      # {"-genkey      [-v] [-protected]",
      # "-genkey      [-v] [-protected]"},
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # {"-identitydb  [-v] [-protected]",
      # "-identitydb  [-v] [-protected]"},
      # {"\t     [-file <idb_file>]", "\t     [-file <idb_file>]"},
      # rest is same as -certreq starting from -keystore *
      # {"-import      [-v] [-noprompt] [-trustcacerts] [-protected]",
      # "-import      [-v] [-noprompt] [-trustcacerts] [-protected]"},
      # rest is same as -certreq starting from -keystore *
      # line too long, split to 2
      # rest is same as -certreq starting from -keystore *
      # {"-keyclone    [-v] [-protected]",
      # "-keyclone    [-v] [-protected]"},
      # {"\t     [-alias <alias>] -dest <dest_alias>",
      # "\t     [-alias <alias>] -dest <dest_alias>"},
      # {"\t     [-keypass <keypass>] [-new <new_keypass>]",
      # "\t     [-keypass <keypass>] [-new <new_keypass>]"},
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # {"-selfcert    [-v] [-protected]",
      # "-selfcert    [-v] [-protected]"},
      # {"\t     [-dname <dname>] [-validity <valDays>]",
      # "\t     [-dname <dname>] [-validity <valDays>]"},
      # {"\t     [-keypass <keypass>] [-sigalg <sigalg>]",
      # "\t     [-keypass <keypass>] [-sigalg <sigalg>]"},
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # policytool
      # javax.security.auth.PrivateCredentialPermission
      # javax.security.auth.x500
      # javax.security.auth.Subject
      # javax.security.auth.login.AppConfigurationEntry
      # javax.security.auth.login.LoginContext
      # sun.security.provider.PolicyFile
      # sun.security.provider.PolicyParser
      # sun.security.pkcs11.SunPKCS11
      # --- DEPRECATED ---
      # javax.security.auth.Policy
      const_set_lazy(:Contents) { Array.typed(Array.typed(Object)).new([Array.typed(Object).new([" ", " "]), Array.typed(Object).new(["  ", "  "]), Array.typed(Object).new(["      ", "      "]), Array.typed(Object).new([", ", ", "]), Array.typed(Object).new(["\n", "\n"]), Array.typed(Object).new(["*******************************************", "*******************************************"]), Array.typed(Object).new(["*******************************************\n\n", "*******************************************\n\n"]), Array.typed(Object).new(["keytool error: ", "keytool error: "]), Array.typed(Object).new(["Illegal option:  ", "Illegal option:  "]), Array.typed(Object).new(["Try keytool -help", "Try keytool -help"]), Array.typed(Object).new(["Command option <flag> needs an argument.", "Command option {0} needs an argument."]), Array.typed(Object).new(["Warning:  Different store and key passwords not supported for PKCS12 KeyStores. Ignoring user-specified <command> value.", "Warning:  Different store and key passwords not supported for PKCS12 KeyStores. Ignoring user-specified {0} value."]), Array.typed(Object).new(["-keystore must be NONE if -storetype is {0}", "-keystore must be NONE if -storetype is {0}"]), Array.typed(Object).new(["Too may retries, program terminated", "Too may retries, program terminated"]), Array.typed(Object).new(["-storepasswd and -keypasswd commands not supported if -storetype is {0}", "-storepasswd and -keypasswd commands not supported if -storetype is {0}"]), Array.typed(Object).new(["-keypasswd commands not supported if -storetype is PKCS12", "-keypasswd commands not supported if -storetype is PKCS12"]), Array.typed(Object).new(["-keypass and -new can not be specified if -storetype is {0}", "-keypass and -new can not be specified if -storetype is {0}"]), Array.typed(Object).new(["if -protected is specified, then -storepass, -keypass, and -new must not be specified", "if -protected is specified, then -storepass, -keypass, and -new must not be specified"]), Array.typed(Object).new(["if -srcprotected is specified, then -srcstorepass and -srckeypass must not be specified", "if -srcprotected is specified, then -srcstorepass and -srckeypass must not be specified"]), Array.typed(Object).new(["if keystore is not password protected, then -storepass, -keypass, and -new must not be specified", "if keystore is not password protected, then -storepass, -keypass, and -new must not be specified"]), Array.typed(Object).new(["if source keystore is not password protected, then -srcstorepass and -srckeypass must not be specified", "if source keystore is not password protected, then -srcstorepass and -srckeypass must not be specified"]), Array.typed(Object).new(["Validity must be greater than zero", "Validity must be greater than zero"]), Array.typed(Object).new(["provName not a provider", "{0} not a provider"]), Array.typed(Object).new(["Usage error: no command provided", "Usage error: no command provided"]), Array.typed(Object).new(["Usage error, <arg> is not a legal command", "Usage error, {0} is not a legal command"]), Array.typed(Object).new(["Source keystore file exists, but is empty: ", "Source keystore file exists, but is empty: "]), Array.typed(Object).new(["Please specify -srckeystore", "Please specify -srckeystore"]), Array.typed(Object).new(["Must not specify both -v and -rfc with 'list' command", "Must not specify both -v and -rfc with 'list' command"]), Array.typed(Object).new(["Key password must be at least 6 characters", "Key password must be at least 6 characters"]), Array.typed(Object).new(["New password must be at least 6 characters", "New password must be at least 6 characters"]), Array.typed(Object).new(["Keystore file exists, but is empty: ", "Keystore file exists, but is empty: "]), Array.typed(Object).new(["Keystore file does not exist: ", "Keystore file does not exist: "]), Array.typed(Object).new(["Must specify destination alias", "Must specify destination alias"]), Array.typed(Object).new(["Must specify alias", "Must specify alias"]), Array.typed(Object).new(["Keystore password must be at least 6 characters", "Keystore password must be at least 6 characters"]), Array.typed(Object).new(["Enter keystore password:  ", "Enter keystore password:  "]), Array.typed(Object).new(["Enter source keystore password:  ", "Enter source keystore password:  "]), Array.typed(Object).new(["Enter destination keystore password:  ", "Enter destination keystore password:  "]), Array.typed(Object).new(["Keystore password is too short - must be at least 6 characters", "Keystore password is too short - must be at least 6 characters"]), Array.typed(Object).new(["Unknown Entry Type", "Unknown Entry Type"]), Array.typed(Object).new(["Too many failures. Alias not changed", "Too many failures. Alias not changed"]), Array.typed(Object).new(["Entry for alias <alias> successfully imported.", "Entry for alias {0} successfully imported."]), Array.typed(Object).new(["Entry for alias <alias> not imported.", "Entry for alias {0} not imported."]), Array.typed(Object).new(["Problem importing entry for alias <alias>: <exception>.\nEntry for alias <alias> not imported.", "Problem importing entry for alias {0}: {1}.\nEntry for alias {0} not imported."]), Array.typed(Object).new(["Import command completed:  <ok> entries successfully imported, <fail> entries failed or cancelled", "Import command completed:  {0} entries successfully imported, {1} entries failed or cancelled"]), Array.typed(Object).new(["Warning: Overwriting existing alias <alias> in destination keystore", "Warning: Overwriting existing alias {0} in destination keystore"]), Array.typed(Object).new(["Existing entry alias <alias> exists, overwrite? [no]:  ", "Existing entry alias {0} exists, overwrite? [no]:  "]), Array.typed(Object).new(["Too many failures - try later", "Too many failures - try later"]), Array.typed(Object).new(["Certification request stored in file <filename>", "Certification request stored in file <{0}>"]), Array.typed(Object).new(["Submit this to your CA", "Submit this to your CA"]), Array.typed(Object).new(["if alias not specified, destalias, srckeypass, and destkeypass must not be specified", "if alias not specified, destalias, srckeypass, and destkeypass must not be specified"]), Array.typed(Object).new(["Certificate stored in file <filename>", "Certificate stored in file <{0}>"]), Array.typed(Object).new(["Certificate reply was installed in keystore", "Certificate reply was installed in keystore"]), Array.typed(Object).new(["Certificate reply was not installed in keystore", "Certificate reply was not installed in keystore"]), Array.typed(Object).new(["Certificate was added to keystore", "Certificate was added to keystore"]), Array.typed(Object).new(["Certificate was not added to keystore", "Certificate was not added to keystore"]), Array.typed(Object).new(["[Storing ksfname]", "[Storing {0}]"]), Array.typed(Object).new(["alias has no public key (certificate)", "{0} has no public key (certificate)"]), Array.typed(Object).new(["Cannot derive signature algorithm", "Cannot derive signature algorithm"]), Array.typed(Object).new(["Alias <alias> does not exist", "Alias <{0}> does not exist"]), Array.typed(Object).new(["Alias <alias> has no certificate", "Alias <{0}> has no certificate"]), Array.typed(Object).new(["Key pair not generated, alias <alias> already exists", "Key pair not generated, alias <{0}> already exists"]), Array.typed(Object).new(["Cannot derive signature algorithm", "Cannot derive signature algorithm"]), Array.typed(Object).new(["Generating keysize bit keyAlgName key pair and self-signed certificate (sigAlgName) with a validity of validality days\n\tfor: x500Name", "Generating {0} bit {1} key pair and self-signed certificate ({2}) with a validity of {3} days\n\tfor: {4}"]), Array.typed(Object).new(["Enter key password for <alias>", "Enter key password for <{0}>"]), Array.typed(Object).new(["\t(RETURN if same as keystore password):  ", "\t(RETURN if same as keystore password):  "]), Array.typed(Object).new(["Key password is too short - must be at least 6 characters", "Key password is too short - must be at least 6 characters"]), Array.typed(Object).new(["Too many failures - key not added to keystore", "Too many failures - key not added to keystore"]), Array.typed(Object).new(["Destination alias <dest> already exists", "Destination alias <{0}> already exists"]), Array.typed(Object).new(["Password is too short - must be at least 6 characters", "Password is too short - must be at least 6 characters"]), Array.typed(Object).new(["Too many failures. Key entry not cloned", "Too many failures. Key entry not cloned"]), Array.typed(Object).new(["key password for <alias>", "key password for <{0}>"]), Array.typed(Object).new(["Keystore entry for <id.getName()> already exists", "Keystore entry for <{0}> already exists"]), Array.typed(Object).new(["Creating keystore entry for <id.getName()> ...", "Creating keystore entry for <{0}> ..."]), Array.typed(Object).new(["No entries from identity database added", "No entries from identity database added"]), Array.typed(Object).new(["Alias name: alias", "Alias name: {0}"]), Array.typed(Object).new(["Creation date: keyStore.getCreationDate(alias)", "Creation date: {0,date}"]), Array.typed(Object).new(["alias, keyStore.getCreationDate(alias), ", "{0}, {1,date}, "]), Array.typed(Object).new(["alias, ", "{0}, "]), Array.typed(Object).new(["Entry type: <type>", "Entry type: {0}"]), Array.typed(Object).new(["Certificate chain length: ", "Certificate chain length: "]), Array.typed(Object).new(["Certificate[(i + 1)]:", "Certificate[{0,number,integer}]:"]), Array.typed(Object).new(["Certificate fingerprint (MD5): ", "Certificate fingerprint (MD5): "]), Array.typed(Object).new(["Entry type: trustedCertEntry\n", "Entry type: trustedCertEntry\n"]), Array.typed(Object).new(["trustedCertEntry,", "trustedCertEntry,"]), Array.typed(Object).new(["Keystore type: ", "Keystore type: "]), Array.typed(Object).new(["Keystore provider: ", "Keystore provider: "]), Array.typed(Object).new(["Your keystore contains keyStore.size() entry", "Your keystore contains {0,number,integer} entry"]), Array.typed(Object).new(["Your keystore contains keyStore.size() entries", "Your keystore contains {0,number,integer} entries"]), Array.typed(Object).new(["Failed to parse input", "Failed to parse input"]), Array.typed(Object).new(["Empty input", "Empty input"]), Array.typed(Object).new(["Not X.509 certificate", "Not X.509 certificate"]), Array.typed(Object).new(["Cannot derive signature algorithm", "Cannot derive signature algorithm"]), Array.typed(Object).new(["alias has no public key", "{0} has no public key"]), Array.typed(Object).new(["alias has no X.509 certificate", "{0} has no X.509 certificate"]), Array.typed(Object).new(["New certificate (self-signed):", "New certificate (self-signed):"]), Array.typed(Object).new(["Reply has no certificates", "Reply has no certificates"]), Array.typed(Object).new(["Certificate not imported, alias <alias> already exists", "Certificate not imported, alias <{0}> already exists"]), Array.typed(Object).new(["Input not an X.509 certificate", "Input not an X.509 certificate"]), Array.typed(Object).new(["Certificate already exists in keystore under alias <trustalias>", "Certificate already exists in keystore under alias <{0}>"]), Array.typed(Object).new(["Do you still want to add it? [no]:  ", "Do you still want to add it? [no]:  "]), Array.typed(Object).new(["Certificate already exists in system-wide CA keystore under alias <trustalias>", "Certificate already exists in system-wide CA keystore under alias <{0}>"]), Array.typed(Object).new(["Do you still want to add it to your own keystore? [no]:  ", "Do you still want to add it to your own keystore? [no]:  "]), Array.typed(Object).new(["Trust this certificate? [no]:  ", "Trust this certificate? [no]:  "]), Array.typed(Object).new(["YES", "YES"]), Array.typed(Object).new(["New prompt: ", "New {0}: "]), Array.typed(Object).new(["Passwords must differ", "Passwords must differ"]), Array.typed(Object).new(["Re-enter new prompt: ", "Re-enter new {0}: "]), Array.typed(Object).new(["Re-enter new password: ", "Re-enter new password: "]), Array.typed(Object).new(["They don't match. Try again", "They don't match. Try again"]), Array.typed(Object).new(["Enter prompt alias name:  ", "Enter {0} alias name:  "]), Array.typed(Object).new(["Enter new alias name\t(RETURN to cancel import for this entry):  ", "Enter new alias name\t(RETURN to cancel import for this entry):  "]), Array.typed(Object).new(["Enter alias name:  ", "Enter alias name:  "]), Array.typed(Object).new(["\t(RETURN if same as for <otherAlias>)", "\t(RETURN if same as for <{0}>)"]), Array.typed(Object).new(["*PATTERN* printX509Cert", "Owner: {0}\nIssuer: {1}\nSerial number: {2}\nValid from: {3} until: {4}\nCertificate fingerprints:\n\t MD5:  {5}\n\t SHA1: {6}\n\t Signature algorithm name: {7}\n\t Version: {8}"]), Array.typed(Object).new(["What is your first and last name?", "What is your first and last name?"]), Array.typed(Object).new(["What is the name of your organizational unit?", "What is the name of your organizational unit?"]), Array.typed(Object).new(["What is the name of your organization?", "What is the name of your organization?"]), Array.typed(Object).new(["What is the name of your City or Locality?", "What is the name of your City or Locality?"]), Array.typed(Object).new(["What is the name of your State or Province?", "What is the name of your State or Province?"]), Array.typed(Object).new(["What is the two-letter country code for this unit?", "What is the two-letter country code for this unit?"]), Array.typed(Object).new(["Is <name> correct?", "Is {0} correct?"]), Array.typed(Object).new(["no", "no"]), Array.typed(Object).new(["yes", "yes"]), Array.typed(Object).new(["y", "y"]), Array.typed(Object).new(["  [defaultValue]:  ", "  [{0}]:  "]), Array.typed(Object).new(["Alias <alias> has no key", "Alias <{0}> has no key"]), Array.typed(Object).new(["Alias <alias> references an entry type that is not a private key entry.  The -keyclone command only supports cloning of private key entries", "Alias <{0}> references an entry type that is not a private key entry.  The -keyclone command only supports cloning of private key entries"]), Array.typed(Object).new(["*****************  WARNING WARNING WARNING  *****************", "*****************  WARNING WARNING WARNING  *****************"]), Array.typed(Object).new(["* The integrity of the information stored in your keystore  *", "* The integrity of the information stored in your keystore  *"]), Array.typed(Object).new(["* The integrity of the information stored in the srckeystore*", "* The integrity of the information stored in the srckeystore*"]), Array.typed(Object).new(["* has NOT been verified!  In order to verify its integrity, *", "* has NOT been verified!  In order to verify its integrity, *"]), Array.typed(Object).new(["* you must provide your keystore password.                  *", "* you must provide your keystore password.                  *"]), Array.typed(Object).new(["* you must provide the srckeystore password.                *", "* you must provide the srckeystore password.                *"]), Array.typed(Object).new(["Certificate reply does not contain public key for <alias>", "Certificate reply does not contain public key for <{0}>"]), Array.typed(Object).new(["Incomplete certificate chain in reply", "Incomplete certificate chain in reply"]), Array.typed(Object).new(["Certificate chain in reply does not verify: ", "Certificate chain in reply does not verify: "]), Array.typed(Object).new(["Top-level certificate in reply:\n", "Top-level certificate in reply:\n"]), Array.typed(Object).new(["... is not trusted. ", "... is not trusted. "]), Array.typed(Object).new(["Install reply anyway? [no]:  ", "Install reply anyway? [no]:  "]), Array.typed(Object).new(["NO", "NO"]), Array.typed(Object).new(["Public keys in reply and keystore don't match", "Public keys in reply and keystore don't match"]), Array.typed(Object).new(["Certificate reply and certificate in keystore are identical", "Certificate reply and certificate in keystore are identical"]), Array.typed(Object).new(["Failed to establish chain from reply", "Failed to establish chain from reply"]), Array.typed(Object).new(["n", "n"]), Array.typed(Object).new(["Wrong answer, try again", "Wrong answer, try again"]), Array.typed(Object).new(["Secret key not generated, alias <alias> already exists", "Secret Key not generated, alias <{0}> already exists"]), Array.typed(Object).new(["Please provide -keysize for secret key generation", "Please provide -keysize for secret key generation"]), Array.typed(Object).new(["keytool usage:\n", "keytool usage:\n"]), Array.typed(Object).new(["Extensions: ", "Extensions: "]), Array.typed(Object).new(["-certreq     [-v] [-protected]", "-certreq     [-v] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>] [-sigalg <sigalg>]", "\t     [-alias <alias>] [-sigalg <sigalg>]"]), Array.typed(Object).new(["\t     [-file <csr_file>] [-keypass <keypass>]", "\t     [-file <csr_file>] [-keypass <keypass>]"]), Array.typed(Object).new(["\t     [-keystore <keystore>] [-storepass <storepass>]", "\t     [-keystore <keystore>] [-storepass <storepass>]"]), Array.typed(Object).new(["\t     [-storetype <storetype>] [-providername <name>]", "\t     [-storetype <storetype>] [-providername <name>]"]), Array.typed(Object).new(["\t     [-providerclass <provider_class_name> [-providerarg <arg>]] ...", "\t     [-providerclass <provider_class_name> [-providerarg <arg>]] ..."]), Array.typed(Object).new(["\t     [-providerpath <pathlist>]", "\t     [-providerpath <pathlist>]"]), Array.typed(Object).new(["-delete      [-v] [-protected] -alias <alias>", "-delete      [-v] [-protected] -alias <alias>"]), Array.typed(Object).new(["-exportcert  [-v] [-rfc] [-protected]", "-exportcert  [-v] [-rfc] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>] [-file <cert_file>]", "\t     [-alias <alias>] [-file <cert_file>]"]), Array.typed(Object).new(["-genkeypair  [-v] [-protected]", "-genkeypair  [-v] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <alias>]"]), Array.typed(Object).new(["\t     [-keyalg <keyalg>] [-keysize <keysize>]", "\t     [-keyalg <keyalg>] [-keysize <keysize>]"]), Array.typed(Object).new(["\t     [-sigalg <sigalg>] [-dname <dname>]", "\t     [-sigalg <sigalg>] [-dname <dname>]"]), Array.typed(Object).new(["\t     [-validity <valDays>] [-keypass <keypass>]", "\t     [-validity <valDays>] [-keypass <keypass>]"]), Array.typed(Object).new(["-genseckey   [-v] [-protected]", "-genseckey   [-v] [-protected]"]), Array.typed(Object).new(["-help", "-help"]), Array.typed(Object).new(["-importcert  [-v] [-noprompt] [-trustcacerts] [-protected]", "-importcert  [-v] [-noprompt] [-trustcacerts] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <alias>]"]), Array.typed(Object).new(["\t     [-alias <alias>] [-keypass <keypass>]", "\t     [-alias <alias>] [-keypass <keypass>]"]), Array.typed(Object).new(["\t     [-file <cert_file>] [-keypass <keypass>]", "\t     [-file <cert_file>] [-keypass <keypass>]"]), Array.typed(Object).new(["-importkeystore [-v] ", "-importkeystore [-v] "]), Array.typed(Object).new(["\t     [-srckeystore <srckeystore>] [-destkeystore <destkeystore>]", "\t     [-srckeystore <srckeystore>] [-destkeystore <destkeystore>]"]), Array.typed(Object).new(["\t     [-srcstoretype <srcstoretype>] [-deststoretype <deststoretype>]", "\t     [-srcstoretype <srcstoretype>] [-deststoretype <deststoretype>]"]), Array.typed(Object).new(["\t     [-srcprotected] [-destprotected]", "\t     [-srcprotected] [-destprotected]"]), Array.typed(Object).new(["\t     [-srcstorepass <srcstorepass>] [-deststorepass <deststorepass>]", "\t     [-srcstorepass <srcstorepass>] [-deststorepass <deststorepass>]"]), Array.typed(Object).new(["\t     [-srcprovidername <srcprovidername>]\n\t     [-destprovidername <destprovidername>]", "\t     [-srcprovidername <srcprovidername>]\n\t     [-destprovidername <destprovidername>]"]), Array.typed(Object).new(["\t     [-srcalias <srcalias> [-destalias <destalias>]", "\t     [-srcalias <srcalias> [-destalias <destalias>]"]), Array.typed(Object).new(["\t       [-srckeypass <srckeypass>] [-destkeypass <destkeypass>]]", "\t       [-srckeypass <srckeypass>] [-destkeypass <destkeypass>]]"]), Array.typed(Object).new(["\t     [-noprompt]", "\t     [-noprompt]"]), Array.typed(Object).new(["-changealias [-v] [-protected] -alias <alias> -destalias <destalias>", "-changealias [-v] [-protected] -alias <alias> -destalias <destalias>"]), Array.typed(Object).new(["\t     [-keypass <keypass>]", "\t     [-keypass <keypass>]"]), Array.typed(Object).new(["-keypasswd   [-v] [-alias <alias>]", "-keypasswd   [-v] [-alias <alias>]"]), Array.typed(Object).new(["\t     [-keypass <old_keypass>] [-new <new_keypass>]", "\t     [-keypass <old_keypass>] [-new <new_keypass>]"]), Array.typed(Object).new(["-list        [-v | -rfc] [-protected]", "-list        [-v | -rfc] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <alias>]"]), Array.typed(Object).new(["-printcert   [-v] [-file <cert_file>]", "-printcert   [-v] [-file <cert_file>]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <alias>]"]), Array.typed(Object).new(["-storepasswd [-v] [-new <new_storepass>]", "-storepasswd [-v] [-new <new_storepass>]"]), Array.typed(Object).new(["Warning: A public key for alias 'signers[i]' does not exist.  Make sure a KeyStore is properly configured.", "Warning: A public key for alias {0} does not exist.  Make sure a KeyStore is properly configured."]), Array.typed(Object).new(["Warning: Class not found: class", "Warning: Class not found: {0}"]), Array.typed(Object).new(["Warning: Invalid argument(s) for constructor: arg", "Warning: Invalid argument(s) for constructor: {0}"]), Array.typed(Object).new(["Illegal Principal Type: type", "Illegal Principal Type: {0}"]), Array.typed(Object).new(["Illegal option: option", "Illegal option: {0}"]), Array.typed(Object).new(["Usage: policytool [options]", "Usage: policytool [options]"]), Array.typed(Object).new(["  [-file <file>]    policy file location", "  [-file <file>]    policy file location"]), Array.typed(Object).new(["New", "New"]), Array.typed(Object).new(["Open", "Open"]), Array.typed(Object).new(["Save", "Save"]), Array.typed(Object).new(["Save As", "Save As"]), Array.typed(Object).new(["View Warning Log", "View Warning Log"]), Array.typed(Object).new(["Exit", "Exit"]), Array.typed(Object).new(["Add Policy Entry", "Add Policy Entry"]), Array.typed(Object).new(["Edit Policy Entry", "Edit Policy Entry"]), Array.typed(Object).new(["Remove Policy Entry", "Remove Policy Entry"]), Array.typed(Object).new(["Edit", "Edit"]), Array.typed(Object).new(["Retain", "Retain"]), Array.typed(Object).new(["Warning: File name may include escaped backslash characters. " + "It is not necessary to escape backslash characters " + "(the tool escapes characters as necessary when writing " + "the policy contents to the persistent store).\n\n" + "Click on Retain to retain the entered name, or click on " + "Edit to edit the name.", "Warning: File name may include escaped backslash characters. " + "It is not necessary to escape backslash characters " + "(the tool escapes characters as necessary when writing " + "the policy contents to the persistent store).\n\n" + "Click on Retain to retain the entered name, or click on " + "Edit to edit the name."]), Array.typed(Object).new(["Add Public Key Alias", "Add Public Key Alias"]), Array.typed(Object).new(["Remove Public Key Alias", "Remove Public Key Alias"]), Array.typed(Object).new(["File", "File"]), Array.typed(Object).new(["KeyStore", "KeyStore"]), Array.typed(Object).new(["Policy File:", "Policy File:"]), Array.typed(Object).new(["Could not open policy file: policyFile: e.toString()", "Could not open policy file: {0}: {1}"]), Array.typed(Object).new(["Policy Tool", "Policy Tool"]), Array.typed(Object).new(["Errors have occurred while opening the policy configuration.  View the Warning Log for more information.", "Errors have occurred while opening the policy configuration.  View the Warning Log for more information."]), Array.typed(Object).new(["Error", "Error"]), Array.typed(Object).new(["OK", "OK"]), Array.typed(Object).new(["Status", "Status"]), Array.typed(Object).new(["Warning", "Warning"]), Array.typed(Object).new(["Permission:                                                       ", "Permission:                                                       "]), Array.typed(Object).new(["Principal Type:", "Principal Type:"]), Array.typed(Object).new(["Principal Name:", "Principal Name:"]), Array.typed(Object).new(["Target Name:                                                    ", "Target Name:                                                    "]), Array.typed(Object).new(["Actions:                                                             ", "Actions:                                                             "]), Array.typed(Object).new(["OK to overwrite existing file filename?", "OK to overwrite existing file {0}?"]), Array.typed(Object).new(["Cancel", "Cancel"]), Array.typed(Object).new(["CodeBase:", "CodeBase:"]), Array.typed(Object).new(["SignedBy:", "SignedBy:"]), Array.typed(Object).new(["Add Principal", "Add Principal"]), Array.typed(Object).new(["Edit Principal", "Edit Principal"]), Array.typed(Object).new(["Remove Principal", "Remove Principal"]), Array.typed(Object).new(["Principals:", "Principals:"]), Array.typed(Object).new(["  Add Permission", "  Add Permission"]), Array.typed(Object).new(["  Edit Permission", "  Edit Permission"]), Array.typed(Object).new(["Remove Permission", "Remove Permission"]), Array.typed(Object).new(["Done", "Done"]), Array.typed(Object).new(["KeyStore URL:", "KeyStore URL:"]), Array.typed(Object).new(["KeyStore Type:", "KeyStore Type:"]), Array.typed(Object).new(["KeyStore Provider:", "KeyStore Provider:"]), Array.typed(Object).new(["KeyStore Password URL:", "KeyStore Password URL:"]), Array.typed(Object).new(["Principals", "Principals"]), Array.typed(Object).new(["  Edit Principal:", "  Edit Principal:"]), Array.typed(Object).new(["  Add New Principal:", "  Add New Principal:"]), Array.typed(Object).new(["Permissions", "Permissions"]), Array.typed(Object).new(["  Edit Permission:", "  Edit Permission:"]), Array.typed(Object).new(["  Add New Permission:", "  Add New Permission:"]), Array.typed(Object).new(["Signed By:", "Signed By:"]), Array.typed(Object).new(["Cannot Specify Principal with a Wildcard Class without a Wildcard Name", "Cannot Specify Principal with a Wildcard Class without a Wildcard Name"]), Array.typed(Object).new(["Cannot Specify Principal without a Name", "Cannot Specify Principal without a Name"]), Array.typed(Object).new(["Permission and Target Name must have a value", "Permission and Target Name must have a value"]), Array.typed(Object).new(["Remove this Policy Entry?", "Remove this Policy Entry?"]), Array.typed(Object).new(["Overwrite File", "Overwrite File"]), Array.typed(Object).new(["Policy successfully written to filename", "Policy successfully written to {0}"]), Array.typed(Object).new(["null filename", "null filename"]), Array.typed(Object).new(["Save changes?", "Save changes?"]), Array.typed(Object).new(["Yes", "Yes"]), Array.typed(Object).new(["No", "No"]), Array.typed(Object).new(["Policy Entry", "Policy Entry"]), Array.typed(Object).new(["Save Changes", "Save Changes"]), Array.typed(Object).new(["No Policy Entry selected", "No Policy Entry selected"]), Array.typed(Object).new(["Unable to open KeyStore: ex.toString()", "Unable to open KeyStore: {0}"]), Array.typed(Object).new(["No principal selected", "No principal selected"]), Array.typed(Object).new(["No permission selected", "No permission selected"]), Array.typed(Object).new(["name", "name"]), Array.typed(Object).new(["configuration type", "configuration type"]), Array.typed(Object).new(["environment variable name", "environment variable name"]), Array.typed(Object).new(["library name", "library name"]), Array.typed(Object).new(["package name", "package name"]), Array.typed(Object).new(["policy type", "policy type"]), Array.typed(Object).new(["property name", "property name"]), Array.typed(Object).new(["provider name", "provider name"]), Array.typed(Object).new(["Principal List", "Principal List"]), Array.typed(Object).new(["Permission List", "Permission List"]), Array.typed(Object).new(["Code Base", "Code Base"]), Array.typed(Object).new(["KeyStore U R L:", "KeyStore U R L:"]), Array.typed(Object).new(["KeyStore Password U R L:", "KeyStore Password U R L:"]), Array.typed(Object).new(["invalid null input(s)", "invalid null input(s)"]), Array.typed(Object).new(["actions can only be 'read'", "actions can only be 'read'"]), Array.typed(Object).new(["permission name [name] syntax invalid: ", "permission name [{0}] syntax invalid: "]), Array.typed(Object).new(["Credential Class not followed by a Principal Class and Name", "Credential Class not followed by a Principal Class and Name"]), Array.typed(Object).new(["Principal Class not followed by a Principal Name", "Principal Class not followed by a Principal Name"]), Array.typed(Object).new(["Principal Name must be surrounded by quotes", "Principal Name must be surrounded by quotes"]), Array.typed(Object).new(["Principal Name missing end quote", "Principal Name missing end quote"]), Array.typed(Object).new(["PrivateCredentialPermission Principal Class can not be a wildcard (*) value if Principal Name is not a wildcard (*) value", "PrivateCredentialPermission Principal Class can not be a wildcard (*) value if Principal Name is not a wildcard (*) value"]), Array.typed(Object).new(["CredOwner:\n\tPrincipal Class = class\n\tPrincipal Name = name", "CredOwner:\n\tPrincipal Class = {0}\n\tPrincipal Name = {1}"]), Array.typed(Object).new(["provided null name", "provided null name"]), Array.typed(Object).new(["provided null keyword map", "provided null keyword map"]), Array.typed(Object).new(["provided null OID map", "provided null OID map"]), Array.typed(Object).new(["invalid null AccessControlContext provided", "invalid null AccessControlContext provided"]), Array.typed(Object).new(["invalid null action provided", "invalid null action provided"]), Array.typed(Object).new(["invalid null Class provided", "invalid null Class provided"]), Array.typed(Object).new(["Subject:\n", "Subject:\n"]), Array.typed(Object).new(["\tPrincipal: ", "\tPrincipal: "]), Array.typed(Object).new(["\tPublic Credential: ", "\tPublic Credential: "]), Array.typed(Object).new(["\tPrivate Credentials inaccessible\n", "\tPrivate Credentials inaccessible\n"]), Array.typed(Object).new(["\tPrivate Credential: ", "\tPrivate Credential: "]), Array.typed(Object).new(["\tPrivate Credential inaccessible\n", "\tPrivate Credential inaccessible\n"]), Array.typed(Object).new(["Subject is read-only", "Subject is read-only"]), Array.typed(Object).new(["attempting to add an object which is not an instance of java.security.Principal to a Subject's Principal Set", "attempting to add an object which is not an instance of java.security.Principal to a Subject's Principal Set"]), Array.typed(Object).new(["attempting to add an object which is not an instance of class", "attempting to add an object which is not an instance of {0}"]), Array.typed(Object).new(["LoginModuleControlFlag: ", "LoginModuleControlFlag: "]), Array.typed(Object).new(["Invalid null input: name", "Invalid null input: name"]), Array.typed(Object).new(["No LoginModules configured for name", "No LoginModules configured for {0}"]), Array.typed(Object).new(["invalid null Subject provided", "invalid null Subject provided"]), Array.typed(Object).new(["invalid null CallbackHandler provided", "invalid null CallbackHandler provided"]), Array.typed(Object).new(["null subject - logout called before login", "null subject - logout called before login"]), Array.typed(Object).new(["unable to instantiate LoginModule, module, because it does not provide a no-argument constructor", "unable to instantiate LoginModule, {0}, because it does not provide a no-argument constructor"]), Array.typed(Object).new(["unable to instantiate LoginModule", "unable to instantiate LoginModule"]), Array.typed(Object).new(["unable to instantiate LoginModule: ", "unable to instantiate LoginModule: "]), Array.typed(Object).new(["unable to find LoginModule class: ", "unable to find LoginModule class: "]), Array.typed(Object).new(["unable to access LoginModule: ", "unable to access LoginModule: "]), Array.typed(Object).new(["Login Failure: all modules ignored", "Login Failure: all modules ignored"]), Array.typed(Object).new(["java.security.policy: error parsing policy:\n\tmessage", "java.security.policy: error parsing {0}:\n\t{1}"]), Array.typed(Object).new(["java.security.policy: error adding Permission, perm:\n\tmessage", "java.security.policy: error adding Permission, {0}:\n\t{1}"]), Array.typed(Object).new(["java.security.policy: error adding Entry:\n\tmessage", "java.security.policy: error adding Entry:\n\t{0}"]), Array.typed(Object).new(["alias name not provided (pe.name)", "alias name not provided ({0})"]), Array.typed(Object).new(["unable to perform substitution on alias, suffix", "unable to perform substitution on alias, {0}"]), Array.typed(Object).new(["substitution value, prefix, unsupported", "substitution value, {0}, unsupported"]), Array.typed(Object).new(["(", "("]), Array.typed(Object).new([")", ")"]), Array.typed(Object).new(["type can't be null", "type can't be null"]), Array.typed(Object).new(["keystorePasswordURL can not be specified without also specifying keystore", "keystorePasswordURL can not be specified without also specifying keystore"]), Array.typed(Object).new(["expected keystore type", "expected keystore type"]), Array.typed(Object).new(["expected keystore provider", "expected keystore provider"]), Array.typed(Object).new(["multiple Codebase expressions", "multiple Codebase expressions"]), Array.typed(Object).new(["multiple SignedBy expressions", "multiple SignedBy expressions"]), Array.typed(Object).new(["SignedBy has empty alias", "SignedBy has empty alias"]), Array.typed(Object).new(["can not specify Principal with a wildcard class without a wildcard name", "can not specify Principal with a wildcard class without a wildcard name"]), Array.typed(Object).new(["expected codeBase or SignedBy or Principal", "expected codeBase or SignedBy or Principal"]), Array.typed(Object).new(["expected permission entry", "expected permission entry"]), Array.typed(Object).new(["number ", "number "]), Array.typed(Object).new(["expected [expect], read [end of file]", "expected [{0}], read [end of file]"]), Array.typed(Object).new(["expected [;], read [end of file]", "expected [;], read [end of file]"]), Array.typed(Object).new(["line number: msg", "line {0}: {1}"]), Array.typed(Object).new(["line number: expected [expect], found [actual]", "line {0}: expected [{1}], found [{2}]"]), Array.typed(Object).new(["null principalClass or principalName", "null principalClass or principalName"]), Array.typed(Object).new(["PKCS11 Token [providerName] Password: ", "PKCS11 Token [{0}] Password: "]), Array.typed(Object).new(["unable to instantiate Subject-based policy", "unable to instantiate Subject-based policy"])]) }
      const_attr_reader  :Contents
    }
    
    typesig { [] }
    # Returns the contents of this <code>ResourceBundle</code>.
    # 
    # <p>
    # 
    # @return the contents of this <code>ResourceBundle</code>.
    def get_contents
      return Contents
    end
    
    typesig { [] }
    def initialize
      super()
    end
    
    private
    alias_method :initialize__resources, :initialize
  end
  
end
