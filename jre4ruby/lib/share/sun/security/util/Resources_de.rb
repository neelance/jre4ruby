require "rjava"

# Copyright 2001-2006 Sun Microsystems, Inc.  All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
# 
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the LICENSE file that accompanied this code.
# 
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
# 
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
# 
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
# CA 95054 USA or visit www.sun.com if you need additional information or
# have any questions.
module Sun::Security::Util
  module Resources_deImports #:nodoc:
    class_module.module_eval {
      include ::Java::Lang
      include ::Sun::Security::Util
    }
  end
  
  # <p> This class represents the <code>ResourceBundle</code>
  # for javax.security.auth and sun.security.
  class Resources_de < Java::Util::ListResourceBundle
    include_class_members Resources_deImports
    
    class_module.module_eval {
      # shared (from jarsigner)
      # shared (from keytool)
      # keytool
      # Translators of the following 5 pairs, ATTENTION:
      # the next 5 string pairs are meant to be combined into 2 paragraphs,
      # 1+3+4 and 2+3+5. make sure your translation also does.
      # rest is same as -certreq starting from -keystore *
      # {"-export      [-v] [-rfc] [-protected]",
      # "-export      [-v] [-rfc] [-protected]"},
      # rest is same as -certreq starting from -keystore *
      # {"-genkey      [-v] [-protected]",
      # "-genkey      [-v] [-protected]"},
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # {"-identitydb  [-v] [-protected]",
      # "-identitydb  [-v] [-protected]"},
      # {"\t     [-file <idb_file>]", "\t     [-file <idb_file>]"},
      # rest is same as -certreq starting from -keystore *
      # {"-import      [-v] [-noprompt] [-trustcacerts] [-protected]",
      # "-import      [-v] [-noprompt] [-trustcacerts] [-protected]"},
      # rest is same as -certreq starting from -keystore *
      # Zeile zu lang, zwei Zeilen verwenden
      # rest is same as -certreq starting from -keystore *
      # {"-keyclone    [-v] [-protected]",
      # "-keyclone    [-v] [-protected]"},
      # {"\t     [-alias <alias>] -dest <dest_alias>",
      # "\t     [-alias <alias>] -dest <dest_alias>"},
      # {"\t     [-keypass <keypass>] [-new <new_keypass>]",
      # "\t     [-keypass <keypass>] [-new <new_keypass>]"},
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # {"-selfcert    [-v] [-protected]",
      # "-selfcert    [-v] [-protected]"},
      # {"\t     [-dname <dname>] [-validity <valDays>]",
      # "\t     [-dname <dname>] [-validity <valDays>]"},
      # {"\t     [-keypass <keypass>] [-sigalg <sigalg>]",
      # "\t     [-keypass <keypass>] [-sigalg <sigalg>]"},
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # policytool
      # javax.security.auth.PrivateCredentialPermission
      # javax.security.auth.x500
      # javax.security.auth.Subject
      # javax.security.auth.login.AppConfigurationEntry
      # javax.security.auth.login.LoginContext
      # sun.security.provider.PolicyFile
      # sun.security.provider.PolicyParser
      # sun.security.pkcs11.SunPKCS11
      # --- DEPRECATED ---
      # javax.security.auth.Policy
      const_set_lazy(:Contents) { Array.typed(Array.typed(Object)).new([Array.typed(Object).new([" ", " "]), Array.typed(Object).new(["  ", "  "]), Array.typed(Object).new(["      ", "      "]), Array.typed(Object).new([", ", ", "]), Array.typed(Object).new(["\n", "\n"]), Array.typed(Object).new(["*******************************************", "*******************************************"]), Array.typed(Object).new(["*******************************************\n\n", "*******************************************\n\n"]), Array.typed(Object).new(["keytool error: ", "Keytool-Fehler: "]), Array.typed(Object).new(["Illegal option:  ", ("Unzul".to_u << 0x00e4 << "ssige Option:  ")]), Array.typed(Object).new(["Try keytool -help", "Verwenden Sie den Befehl keytool -help"]), Array.typed(Object).new(["Command option <flag> needs an argument.", ("Befehlsoption {0} ben".to_u << 0x00f6 << "tigt ein Argument.")]), Array.typed(Object).new(["Warning:  Different store and key passwords not supported for PKCS12 KeyStores. Ignoring user-specified <command> value.", ("Warnung: Keine Unterst".to_u << 0x00fc << "tzung f".to_u << 0x00fc << "r unterschiedliche Speicher- und Schl".to_u << 0x00fc << "sselpassw".to_u << 0x00f6 << "rter bei PKCS12 KeyStores. Der benutzerdefinierte Wert {0} wird ignoriert.")]), Array.typed(Object).new(["-keystore must be NONE if -storetype is {0}", "-keystore muss NONE sein, wenn -storetype gleich {0} ist"]), Array.typed(Object).new(["Too may retries, program terminated", "Zu viele erneute Versuche, das Programm wird beendet."]), Array.typed(Object).new(["-storepasswd and -keypasswd commands not supported if -storetype is {0}", ("Die Befehle -storepasswd und -keypasswd werden nicht unterst".to_u << 0x00fc << "tzt, wenn -storetype gleich {0} ist")]), Array.typed(Object).new(["-keypasswd commands not supported if -storetype is PKCS12", ("Befehle des Typs -keypasswd werden nicht unterst".to_u << 0x00fc << "tzt, wenn -storetype gleich PKCS12")]), Array.typed(Object).new(["-keypass and -new can not be specified if -storetype is {0}", ("Die Befehle -keypass und -new k".to_u << 0x00f6 << "nnen nicht spezifiziert werden, wenn -storetype gleich {0} ist")]), Array.typed(Object).new(["if -protected is specified, then -storepass, -keypass, and -new must not be specified", ("Wenn -protected angegeben ist, d".to_u << 0x00fc << "rfen -storepass, -keypass und -new nicht angegeben werden")]), Array.typed(Object).new(["if -srcprotected is specified, then -srcstorepass and -srckeypass must not be specified", ("wenn -srcprotected angegeben ist, d".to_u << 0x00fc << "rfen -srcstorepass und -srckeypass nicht angegeben sein")]), Array.typed(Object).new(["if keystore is not password protected, then -storepass, -keypass, and -new must not be specified", ("Wenn der Keystore nicht passwortgesch".to_u << 0x00fc << "tzt ist, d".to_u << 0x00fc << "rfen -storepass, -keypass und -new nicht spezifiziert werden")]), Array.typed(Object).new(["if source keystore is not password protected, then -srcstorepass and -srckeypass must not be specified", ("Wenn der Quell-Keystore nicht passwortgesch".to_u << 0x00fc << "tzt ist, d".to_u << 0x00fc << "rfen -srcstorepass und -srckeypass nicht spezifiziert werden")]), Array.typed(Object).new(["Validity must be greater than zero", ("G".to_u << 0x00fc << "ltigkeit muss gr".to_u << 0x00f6 << "".to_u << 0x00df << "er als Null sein")]), Array.typed(Object).new(["provName not a provider", "{0} kein Provider"]), Array.typed(Object).new(["Usage error: no command provided", "Verwendungsfehler: kein Befehl angegeben"]), Array.typed(Object).new(["Usage error, <arg> is not a legal command", ("Verwendungsfehler: {0} ist kein g".to_u << 0x00fc << "ltiger Befehl")]), Array.typed(Object).new(["Source keystore file exists, but is empty: ", ("Datei f".to_u << 0x00fc << "r Quell-Keystore ist zwar vorhanden, aber leer: ")]), Array.typed(Object).new(["Please specify -srckeystore", ("Geben Sie ".to_u << 0x0096 << "srckeystore an")]), Array.typed(Object).new(["Must not specify both -v and -rfc with 'list' command", ("-v und -rfc d".to_u << 0x00fc << "rfen bei Befehl 'list' nicht beide angegeben werden")]), Array.typed(Object).new(["Key password must be at least 6 characters", ("Schl".to_u << 0x00fc << "sselpasswort muss mindestens 6 Zeichen lang sein")]), Array.typed(Object).new(["New password must be at least 6 characters", "Neues Passwort muss mindest 6 Zeichen lang sein"]), Array.typed(Object).new(["Keystore file exists, but is empty: ", "Keystore-Datei vorhanden, aber leer: "]), Array.typed(Object).new(["Keystore file does not exist: ", "Keystore-Datei nicht vorhanden: "]), Array.typed(Object).new(["Must specify destination alias", "Zielalias muss angegeben werden."]), Array.typed(Object).new(["Must specify alias", "Alias muss angegeben werden."]), Array.typed(Object).new(["Keystore password must be at least 6 characters", "Keystore-Passwort muss mindestens 6 Zeichen lang sein."]), Array.typed(Object).new(["Enter keystore password:  ", "Geben Sie das Keystore-Passwort ein:  "]), Array.typed(Object).new(["Enter source keystore password:  ", ("Geben Sie das Passwort f".to_u << 0x00fc << "r den Quell-Keystore ein:  ")]), Array.typed(Object).new(["Enter destination keystore password:  ", ("Geben Sie das Passwort f".to_u << 0x00fc << "r den Ziel-Keystore ein:  ")]), Array.typed(Object).new(["Keystore password is too short - must be at least 6 characters", "Keystore-Passwort zu kurz - muss mindestens 6 Zeichen lang sein."]), Array.typed(Object).new(["Unknown Entry Type", "Unbekannter Eintragstyp"]), Array.typed(Object).new(["Too many failures. Alias not changed", ("Zu viele Fehler. Alias nicht ge".to_u << 0x00e4 << "ndert")]), Array.typed(Object).new(["Entry for alias <alias> successfully imported.", ("Eintrag f".to_u << 0x00fc << "r Alias {0} erfolgreich importiert.")]), Array.typed(Object).new(["Entry for alias <alias> not imported.", ("Eintrag f".to_u << 0x00fc << "r Alias {0} nicht importiert.")]), Array.typed(Object).new(["Problem importing entry for alias <alias>: <exception>.\nEntry for alias <alias> not imported.", ("Fehler beim Importieren des Eintrags f".to_u << 0x00fc << "r Alias {0}: {1}.\nEintrag f".to_u << 0x00fc << "r Alias {0} nicht importiert.")]), Array.typed(Object).new(["Import command completed:  <ok> entries successfully imported, <fail> entries failed or cancelled", ("Importbefehl abgeschlossen:  {0} Eintr".to_u << 0x00e4 << "ge erfolgreich importiert, Fehler oder Abbruch bei {1} Eintr".to_u << 0x00e4 << "gen")]), Array.typed(Object).new(["Warning: Overwriting existing alias <alias> in destination keystore", ("Warnung: ".to_u << 0x00dc << "berschreiben von vorhandenem Alias {0} in Ziel-Keystore")]), Array.typed(Object).new(["Existing entry alias <alias> exists, overwrite? [no]:  ", ("Eintrags-Alias {0} bereits vorhanden. ".to_u << 0x00dc << "berschreiben? [Nein]:  ")]), Array.typed(Object).new(["Too many failures - try later", ("Zu viele Fehler - versuchen Sie es sp".to_u << 0x00e4 << "ter noch einmal.")]), Array.typed(Object).new(["Certification request stored in file <filename>", "Zertifizierungsanforderung in Datei <{0}> gespeichert."]), Array.typed(Object).new(["Submit this to your CA", "Reichen Sie dies bei Ihrem CA ein."]), Array.typed(Object).new(["if alias not specified, destalias, srckeypass, and destkeypass must not be specified", ("wenn kein Alias angegeben ist, m".to_u << 0x00fc << "ssen destalias, srckeypass und destkeypass nicht angegeben werden")]), Array.typed(Object).new(["Certificate stored in file <filename>", "Zertifikat in Datei <{0}> gespeichert."]), Array.typed(Object).new(["Certificate reply was installed in keystore", "Zertifikatantwort wurde in Keystore installiert."]), Array.typed(Object).new(["Certificate reply was not installed in keystore", "Zertifikatantwort wurde nicht in Keystore installiert."]), Array.typed(Object).new(["Certificate was added to keystore", ("Zertifikat wurde zu Keystore hinzugef".to_u << 0x00fc << "gt.")]), Array.typed(Object).new(["Certificate was not added to keystore", ("Zertifikat wurde nicht zu Keystore hinzugef".to_u << 0x00fc << "gt.")]), Array.typed(Object).new(["[Storing ksfname]", "[{0} wird gesichert.]"]), Array.typed(Object).new(["alias has no public key (certificate)", ("{0} hat keinen ".to_u << 0x00f6 << "ffentlichen Schl".to_u << 0x00fc << "ssel (Zertifikat).")]), Array.typed(Object).new(["Cannot derive signature algorithm", "Signaturalgorithmus kann nicht abgeleitet werden."]), Array.typed(Object).new(["Alias <alias> does not exist", "Alias <{0}> existiert nicht."]), Array.typed(Object).new(["Alias <alias> has no certificate", "Alias <{0}> hat kein Zertifikat."]), Array.typed(Object).new(["Key pair not generated, alias <alias> already exists", ("Schl".to_u << 0x00fc << "sselpaar wurde nicht erzeugt, Alias <{0}> ist bereits vorhanden.")]), Array.typed(Object).new(["Cannot derive signature algorithm", "Signaturalgorithmus kann nicht abgeleitet werden."]), Array.typed(Object).new(["Generating keysize bit keyAlgName key pair and self-signed certificate (sigAlgName) with a validity of validality days\n\tfor: x500Name", ("Erstellen von Schl".to_u << 0x00fc << "sselpaar (Typ {1}, {0} Bit) und selbstunterzeichnetem Zertifikat ({2}) mit einer G".to_u << 0x00fc << "ltigkeit von {3} Tagen\n\tf".to_u << 0x00fc << "r: {4}")]), Array.typed(Object).new(["Enter key password for <alias>", ("Geben Sie das Passwort f".to_u << 0x00fc << "r <{0}> ein.")]), Array.typed(Object).new(["\t(RETURN if same as keystore password):  ", ("\t(EINGABETASTE, wenn Passwort dasselbe wie f".to_u << 0x00fc << "r Keystore):  ")]), Array.typed(Object).new(["Key password is too short - must be at least 6 characters", ("Schl".to_u << 0x00fc << "sselpasswort zu kurz - muss mindestens 6 Zeichen lang sein.")]), Array.typed(Object).new(["Too many failures - key not added to keystore", ("Zu viele Fehler - Schl".to_u << 0x00fc << "ssel wurde nicht zu Keystore hinzugef".to_u << 0x00fc << "gt.")]), Array.typed(Object).new(["Destination alias <dest> already exists", "Zielalias <{0}> bereits vorhanden"]), Array.typed(Object).new(["Password is too short - must be at least 6 characters", "Passwort zu kurz - muss mindestens 6 Zeichen lang sein"]), Array.typed(Object).new(["Too many failures. Key entry not cloned", ("Zu viele Fehler. Schl".to_u << 0x00fc << "sseleingabe wurde nicht dupliziert.")]), Array.typed(Object).new(["key password for <alias>", ("Schl".to_u << 0x00fc << "sselpasswort f".to_u << 0x00fc << "r <{0}>")]), Array.typed(Object).new(["Keystore entry for <id.getName()> already exists", ("Keystore-Eintrag f".to_u << 0x00fc << "r <{0}> bereits vorhanden")]), Array.typed(Object).new(["Creating keystore entry for <id.getName()> ...", ("Keystore-Eintrag f".to_u << 0x00fc << "r <{0}> wird erstellt ...")]), Array.typed(Object).new(["No entries from identity database added", ("Keine Eintr".to_u << 0x00e4 << "ge von Identit".to_u << 0x00e4 << "tsdatenbank hinzugef".to_u << 0x00fc << "gt")]), Array.typed(Object).new(["Alias name: alias", "Aliasname: {0}"]), Array.typed(Object).new(["Creation date: keyStore.getCreationDate(alias)", "Erstellungsdatum: {0,date}"]), Array.typed(Object).new(["alias, keyStore.getCreationDate(alias), ", "{0}, {1,date}, "]), Array.typed(Object).new(["alias, ", "{0}, "]), Array.typed(Object).new(["Entry type: <type>", "Eintragstyp: {0}"]), Array.typed(Object).new(["Certificate chain length: ", ("Zertifikatskettenl".to_u << 0x00e4 << "nge: ")]), Array.typed(Object).new(["Certificate[(i + 1)]:", "Zertifikat[{0,number,integer}]:"]), Array.typed(Object).new(["Certificate fingerprint (MD5): ", "Zertifikatsfingerabdruck (MD5): "]), Array.typed(Object).new(["Entry type: trustedCertEntry\n", "Eintragstyp: trustedCertEntry\n"]), Array.typed(Object).new(["trustedCertEntry,", "trustedCertEntry,"]), Array.typed(Object).new(["Keystore type: ", "Keystore-Typ: "]), Array.typed(Object).new(["Keystore provider: ", "Keystore-Provider: "]), Array.typed(Object).new(["Your keystore contains keyStore.size() entry", ("Ihr Keystore enth".to_u << 0x00e4 << "lt {0,number,integer} Eintrag/-".to_u << 0x00e4 << "ge.")]), Array.typed(Object).new(["Your keystore contains keyStore.size() entries", ("Ihr Keystore enth".to_u << 0x00e4 << "lt {0,number,integer} Eintr".to_u << 0x00e4 << "ge.")]), Array.typed(Object).new(["Failed to parse input", "Eingabe konnte nicht analysiert werden."]), Array.typed(Object).new(["Empty input", "Leere Eingabe"]), Array.typed(Object).new(["Not X.509 certificate", "Kein X.509-Zertifikat"]), Array.typed(Object).new(["Cannot derive signature algorithm", "Signaturalgorithmus kann nicht abgeleitet werden."]), Array.typed(Object).new(["alias has no public key", ("{0} hat keinen ".to_u << 0x00f6 << "ffentlichen Schl".to_u << 0x00fc << "ssel.")]), Array.typed(Object).new(["alias has no X.509 certificate", "{0} hat kein X.509-Zertifikat."]), Array.typed(Object).new(["New certificate (self-signed):", "Neues Zertifikat (selbstsigniert):"]), Array.typed(Object).new(["Reply has no certificates", "Antwort hat keine Zertifikate."]), Array.typed(Object).new(["Certificate not imported, alias <alias> already exists", "Zertifikat nicht importiert, Alias <{0}> bereits vorhanden"]), Array.typed(Object).new(["Input not an X.509 certificate", "Eingabe kein X.509-Zertifikat"]), Array.typed(Object).new(["Certificate already exists in keystore under alias <trustalias>", "Zertifikat in Keystore bereits unter Alias <{0}> vorhanden"]), Array.typed(Object).new(["Do you still want to add it? [no]:  ", ("M".to_u << 0x00f6 << "chten Sie es trotzdem hinzuf".to_u << 0x00fc << "gen? [Nein]:  ")]), Array.typed(Object).new(["Certificate already exists in system-wide CA keystore under alias <trustalias>", "Zertifikat in systemweiten CA-Keystore bereits unter Alias <{0}> vorhanden."]), Array.typed(Object).new(["Do you still want to add it to your own keystore? [no]:  ", ("M".to_u << 0x00f6 << "chten Sie es trotzdem zu Ihrem eigenen Keystore hinzuf".to_u << 0x00fc << "gen? [Nein]:  ")]), Array.typed(Object).new(["Trust this certificate? [no]:  ", "Diesem Zertifikat vertrauen? [Nein]:  "]), Array.typed(Object).new(["YES", "JA"]), Array.typed(Object).new(["New prompt: ", "Neues {0}: "]), Array.typed(Object).new(["Passwords must differ", ("Passw".to_u << 0x00f6 << "rter m".to_u << 0x00fc << "ssen sich unterscheiden")]), Array.typed(Object).new(["Re-enter new prompt: ", "Neues {0} nochmals eingeben: "]), Array.typed(Object).new(["Re-enter new password: ", "Geben Sie das Passwort erneut ein: "]), Array.typed(Object).new(["They don't match. Try again", ("Keine ".to_u << 0x00dc << "bereinstimmung. Versuchen Sie es erneut.")]), Array.typed(Object).new(["Enter prompt alias name:  ", "Geben Sie den Aliasnamen von {0} ein:  "]), Array.typed(Object).new(["Enter new alias name\t(RETURN to cancel import for this entry):  ", ("Geben Sie einen neuen Alias-Namen ein.\t(Dr".to_u << 0x00fc << "cken Sie die Eingabetaste, um das Importieren dieses Eintrags abzubrechen.):  ")]), Array.typed(Object).new(["Enter alias name:  ", "Geben Sie den Aliasnamen ein:  "]), Array.typed(Object).new(["\t(RETURN if same as for <otherAlias>)", ("\t(EINGABETASTE, wenn selber Name wie f".to_u << 0x00fc << "r <{0}>)")]), Array.typed(Object).new(["*PATTERN* printX509Cert", ("Eigner: {0}\nAussteller: {1}\nSeriennummer: {2}\nG".to_u << 0x00fc << "ltig von: {3} bis: {4}\nDigitaler Fingerabdruck des Zertifikats:\n\t MD5:  {5}\n\t SHA1: {6}\n\t Unterschrift-Algorithmusname: {7}\n\t Version: {8}")]), Array.typed(Object).new(["What is your first and last name?", "Wie lautet Ihr Vor- und Nachname?"]), Array.typed(Object).new(["What is the name of your organizational unit?", "Wie lautet der Name Ihrer organisatorischen Einheit?"]), Array.typed(Object).new(["What is the name of your organization?", "Wie lautet der Name Ihrer Organisation?"]), Array.typed(Object).new(["What is the name of your City or Locality?", "Wie lautet der Name Ihrer Stadt oder Gemeinde?"]), Array.typed(Object).new(["What is the name of your State or Province?", "Wie lautet der Name Ihres Bundeslandes oder Ihrer Provinz?"]), Array.typed(Object).new(["What is the two-letter country code for this unit?", ("Wie lautet der Landescode (zwei Buchstaben) f".to_u << 0x00fc << "r diese Einheit?")]), Array.typed(Object).new(["Is <name> correct?", "Ist {0} richtig?"]), Array.typed(Object).new(["no", "Nein"]), Array.typed(Object).new(["yes", "Ja"]), Array.typed(Object).new(["y", "J"]), Array.typed(Object).new(["  [defaultValue]:  ", " [{0}]:  "]), Array.typed(Object).new(["Alias <alias> has no key", ("Alias <{0}> verf".to_u << 0x00fc << "gt ".to_u << 0x00fc << "ber keinen Schl".to_u << 0x00fc << "ssel")]), Array.typed(Object).new(["Alias <alias> references an entry type that is not a private key entry.  The -keyclone command only supports cloning of private key entries", ("Alias <{0}> verweist auf einen Eintragstyp, der nicht einem Eintrag f".to_u << 0x00fc << "r einen privaten Schl".to_u << 0x00fc << "ssel entspricht.  Der Befehl -keyclone unterst".to_u << 0x00fc << "tzt nur das Klonen von privaten Schl".to_u << 0x00fc << "sseleintr".to_u << 0x00e4 << "gen")]), Array.typed(Object).new(["*****************  WARNING WARNING WARNING  *****************", "*****************  WARNUNG WARNUNG WARNUNG  *****************"]), Array.typed(Object).new(["* The integrity of the information stored in your keystore  *", ("* Die Integrit".to_u << 0x00e4 << "t der in Ihrem Keystore gespeicherten Informationen  *")]), Array.typed(Object).new(["* The integrity of the information stored in the srckeystore*", ("* Die Integrit".to_u << 0x00e4 << "t der in srckeystore gespeicherten Informationen*")]), Array.typed(Object).new(["* has NOT been verified!  In order to verify its integrity, *", ("* ist NICHT verifiziert worden! Damit die Integrit".to_u << 0x00e4 << "t verifiziert werden kann, *")]), Array.typed(Object).new(["* you must provide your keystore password.                  *", ("* m".to_u << 0x00fc << "ssen Sie Ihr Keystore-Passwort eingeben. *")]), Array.typed(Object).new(["* you must provide the srckeystore password.                *", ("* Sie m".to_u << 0x00fc << "ssen das Passwort f".to_u << 0x00fc << "r srckeystore angeben.                *")]), Array.typed(Object).new(["Certificate reply does not contain public key for <alias>", ("Zertifikatantwort enth".to_u << 0x00e4 << "lt keinen ".to_u << 0x00f6 << "ffentlichen Schl".to_u << 0x00fc << "ssel f".to_u << 0x00fc << "r <{0}>.")]), Array.typed(Object).new(["Incomplete certificate chain in reply", ("Unvollst".to_u << 0x00e4 << "ndige Zertifikatskette in Antwort")]), Array.typed(Object).new(["Certificate chain in reply does not verify: ", "Zertifikatskette in Antwort verifiziert nicht: "]), Array.typed(Object).new(["Top-level certificate in reply:\n", "Toplevel-Zertifikat in Antwort:\n"]), Array.typed(Object).new(["... is not trusted. ", "... wird nicht vertraut. "]), Array.typed(Object).new(["Install reply anyway? [no]:  ", "Antwort trotzdem installieren? [Nein]:  "]), Array.typed(Object).new(["NO", "NEIN"]), Array.typed(Object).new(["Public keys in reply and keystore don't match", ("".to_u << 0x00d6 << "ffentliche Schl".to_u << 0x00fc << "ssel in Antwort und Keystore stimmen nicht ".to_u << 0x00fc << "berein.")]), Array.typed(Object).new(["Certificate reply and certificate in keystore are identical", "Zertifikatantwort und Zertifikat in Keystore sind identisch."]), Array.typed(Object).new(["Failed to establish chain from reply", "Kette konnte nicht aus Antwort entnommen werden."]), Array.typed(Object).new(["n", "N"]), Array.typed(Object).new(["Wrong answer, try again", "Falsche Antwort, versuchen Sie es noch einmal."]), Array.typed(Object).new(["Secret key not generated, alias <alias> already exists", ("Geheimschl".to_u << 0x00fc << "ssel wurde nicht erstellt, Alias <{0}> bereits vorhanden")]), Array.typed(Object).new(["Please provide -keysize for secret key generation", ("Geben Sie -keysize zum Erstellen eines Geheimschl".to_u << 0x00fc << "ssels an")]), Array.typed(Object).new(["keytool usage:\n", "Keytool-Syntax:\n"]), Array.typed(Object).new(["Extensions: ", "Erweiterungen: "]), Array.typed(Object).new(["-certreq     [-v] [-protected]", "-certreq     [-v] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>] [-sigalg <sigalg>]", "\t     [-alias <Alias>] [-sigalg <Sigalg>]"]), Array.typed(Object).new(["\t     [-file <csr_file>] [-keypass <keypass>]", "\t     [-file <csr_Datei>] [-keypass <Keypass>]"]), Array.typed(Object).new(["\t     [-keystore <keystore>] [-storepass <storepass>]", "\t     [-keystore <Keystore>] [-storepass <Storepass>]"]), Array.typed(Object).new(["\t     [-storetype <storetype>] [-providername <name>]", "\t     [-storetype <Speichertyp>] [-providername <Name>]"]), Array.typed(Object).new(["\t     [-providerclass <provider_class_name> [-providerarg <arg>]] ...", "\t     [-providerclass <Name der Providerklasse> [-providerarg <Argument>]] ..."]), Array.typed(Object).new(["\t     [-providerpath <pathlist>]", "\t     [-providerpath <Pfadliste>]"]), Array.typed(Object).new(["-delete      [-v] [-protected] -alias <alias>", "-delete      [-v] [-protected] -alias <Alias>"]), Array.typed(Object).new(["-exportcert  [-v] [-rfc] [-protected]", "-exportcert  [-v] [-rfc] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>] [-file <cert_file>]", "\t     [-alias <Alias>] [-file <Zert_datei>]"]), Array.typed(Object).new(["-genkeypair  [-v] [-protected]", "-genkeypair  [-v] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <Alias>]"]), Array.typed(Object).new(["\t     [-keyalg <keyalg>] [-keysize <keysize>]", ("\t     [-keyalg <Schl".to_u << 0x00fc << "ssel-Alg>] [-keysize <Schl".to_u << 0x00fc << "sselgr".to_u << 0x00f6 << "".to_u << 0x00df << "e>]")]), Array.typed(Object).new(["\t     [-sigalg <sigalg>] [-dname <dname>]", "\t     [-sigalg <Signal-Alg>] [-dname <Dname>]"]), Array.typed(Object).new(["\t     [-validity <valDays>] [-keypass <keypass>]", ("\t     [-validity <G".to_u << 0x00fc << "ltigkeitTage>] [-keypass <Schl".to_u << 0x00fc << "sselpass>]")]), Array.typed(Object).new(["-genseckey   [-v] [-protected]", "-genseckey   [-v] [-protected]"]), Array.typed(Object).new(["-help", "-help"]), Array.typed(Object).new(["-importcert  [-v] [-noprompt] [-trustcacerts] [-protected]", "-importcert  [-v] [-noprompt] [-trustcacerts] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <Alias>]"]), Array.typed(Object).new(["\t     [-alias <alias>] [-keypass <keypass>]", "\t     [-alias <Alias>] [-keypass <Keypass>]"]), Array.typed(Object).new(["\t     [-file <cert_file>] [-keypass <keypass>]", ("\t     [-file <Zert_Datei>] [-keypass <Schl".to_u << 0x00fc << "sselpass>]")]), Array.typed(Object).new(["-importkeystore [-v] ", "-importkeystore [-v] "]), Array.typed(Object).new(["\t     [-srckeystore <srckeystore>] [-destkeystore <destkeystore>]", "\t     [-srckeystore <Quell-Keystore>] [-destkeystore <Ziel-Keystore>]"]), Array.typed(Object).new(["\t     [-srcstoretype <srcstoretype>] [-deststoretype <deststoretype>]", "\t     [-srcstoretype <Typ des Quell-Keystore>] [-deststoretype <Typ des Ziel-Keystore>]"]), Array.typed(Object).new(["\t     [-srcprotected] [-destprotected]", "\t     [-srcprotected] [-destprotected]"]), Array.typed(Object).new(["\t     [-srcstorepass <srcstorepass>] [-deststorepass <deststorepass>]", ("\t     [-srcstorepass <Passwort f".to_u << 0x00fc << "r Quell-Keystore>] [-deststorepass <Passwort f".to_u << 0x00fc << "r Ziel-Keystore>]")]), Array.typed(Object).new(["\t     [-srcprovidername <srcprovidername>]\n\t     [-destprovidername <destprovidername>]", "\t     [-srcprovidername <Name des Quell-Providers>]\n\t     [-destprovidername <Name des Ziel-Providers>]"]), Array.typed(Object).new(["\t     [-srcalias <srcalias> [-destalias <destalias>]", "\t     [-srcalias <Quell-Alias> [-destalias <Ziel-Alias>]"]), Array.typed(Object).new(["\t       [-srckeypass <srckeypass>] [-destkeypass <destkeypass>]]", ("\t       [-srckeypass <Passwort f".to_u << 0x00fc << "r Quell-Keystore>] [-destkeypass <Passwort f".to_u << 0x00fc << "r Ziel-Keystore>]]")]), Array.typed(Object).new(["\t     [-noprompt]", "\t     [-noprompt]"]), Array.typed(Object).new(["-changealias [-v] [-protected] -alias <alias> -destalias <destalias>", "-changealias [-v] [-protected] -alias <Alias> -destalias <Ziel-Alias>"]), Array.typed(Object).new(["\t     [-keypass <keypass>]", "\t     [-keypass <Keypass>]"]), Array.typed(Object).new(["-keypasswd   [-v] [-alias <alias>]", "-keypasswd   [-v] [-alias <Alias>]"]), Array.typed(Object).new(["\t     [-keypass <old_keypass>] [-new <new_keypass>]", ("\t     [-keypass <alt_Schl".to_u << 0x00fc << "sselpass>] [-new <neu_Schl".to_u << 0x00fc << "sselpass>]")]), Array.typed(Object).new(["-list        [-v | -rfc] [-protected]", "-list        [-v | -rfc] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <Alias>]"]), Array.typed(Object).new(["-printcert   [-v] [-file <cert_file>]", "-printcert   [-v] [-file <Zert_Datei>]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <Alias>]"]), Array.typed(Object).new(["-storepasswd [-v] [-new <new_storepass>]", "-storepasswd [-v] [-new <neu_Storepass>]"]), Array.typed(Object).new(["Warning: A public key for alias 'signers[i]' does not exist.  Make sure a KeyStore is properly configured.", ("Warnung: Kein ".to_u << 0x00f6 << "ffentlicher Schl".to_u << 0x00fc << "ssel f".to_u << 0x00fc << "r Alias {0} vorhanden.  Vergewissern Sie sich, dass der KeyStore ordnungsgem".to_u << 0x00e4 << "".to_u << 0x00df << " konfiguriert ist.")]), Array.typed(Object).new(["Warning: Class not found: class", "Warnung: Klasse nicht gefunden: {0}"]), Array.typed(Object).new(["Warning: Invalid argument(s) for constructor: arg", ("Warnung: Ung".to_u << 0x00fc << "ltige(s) Argument(e) f".to_u << 0x00fc << "r Konstruktor: {0}")]), Array.typed(Object).new(["Illegal Principal Type: type", ("Unzul".to_u << 0x00e4 << "ssiger Principal-Typ: {0}")]), Array.typed(Object).new(["Illegal option: option", ("Unzul".to_u << 0x00e4 << "ssige Option: {0}")]), Array.typed(Object).new(["Usage: policytool [options]", "Syntax: policytool [Optionen]"]), Array.typed(Object).new(["  [-file <file>]    policy file location", " [-file <Datei>]    Verzeichnis der Richtliniendatei"]), Array.typed(Object).new(["New", "Neu"]), Array.typed(Object).new(["Open", ("".to_u << 0x00d6 << "ffnen")]), Array.typed(Object).new(["Save", "Speichern"]), Array.typed(Object).new(["Save As", "Speichern unter"]), Array.typed(Object).new(["View Warning Log", "Warnungsprotokoll anzeigen"]), Array.typed(Object).new(["Exit", "Beenden"]), Array.typed(Object).new(["Add Policy Entry", ("Richtlinieneintrag hinzuf".to_u << 0x00fc << "gen")]), Array.typed(Object).new(["Edit Policy Entry", "Richtlinieneintrag bearbeiten"]), Array.typed(Object).new(["Remove Policy Entry", ("Richtlinieneintrag l".to_u << 0x00f6 << "schen")]), Array.typed(Object).new(["Edit", "Bearbeiten"]), Array.typed(Object).new(["Retain", "Beibehalten"]), Array.typed(Object).new(["Warning: File name may include escaped backslash characters. " + "It is not necessary to escape backslash characters " + "(the tool escapes characters as necessary when writing " + "the policy contents to the persistent store).\n\n" + "Click on Retain to retain the entered name, or click on " + "Edit to edit the name.", "Warning: File name may include escaped backslash characters. " + "It is not necessary to escape backslash characters " + "(the tool escapes characters as necessary when writing " + "the policy contents to the persistent store).\n\n" + "Click on Retain to retain the entered name, or click on " + "Edit to edit the name."]), Array.typed(Object).new(["Add Public Key Alias", ("Alias f".to_u << 0x00fc << "r ".to_u << 0x00f6 << "ffentlichen Schl".to_u << 0x00fc << "ssel hinzuf".to_u << 0x00fc << "gen")]), Array.typed(Object).new(["Remove Public Key Alias", ("Alias f".to_u << 0x00fc << "r ".to_u << 0x00f6 << "ffentlichen Schl".to_u << 0x00fc << "ssel l".to_u << 0x00f6 << "schen")]), Array.typed(Object).new(["File", "Datei"]), Array.typed(Object).new(["KeyStore", "KeyStore"]), Array.typed(Object).new(["Policy File:", "Richtliniendatei:"]), Array.typed(Object).new(["Could not open policy file: policyFile: e.toString()", ("Richtliniendatei konnte nicht ge".to_u << 0x00f6 << "ffnet werden: {0}: {1}")]), Array.typed(Object).new(["Policy Tool", "Richtlinientool"]), Array.typed(Object).new(["Errors have occurred while opening the policy configuration.  View the Warning Log for more information.", ("Beim ".to_u << 0x00d6 << "ffnen der Richtlinienkonfiguration sind Fehler aufgetreten. Weitere Informationen finden Sie im Warnungsprotokoll.")]), Array.typed(Object).new(["Error", "Fehler"]), Array.typed(Object).new(["OK", "OK"]), Array.typed(Object).new(["Status", "Status"]), Array.typed(Object).new(["Warning", "Warnung"]), Array.typed(Object).new(["Permission:                                                       ", "Berechtigung:                                                       "]), Array.typed(Object).new(["Principal Type:", "Principal-Typ:"]), Array.typed(Object).new(["Principal Name:", "Principal-Name:"]), Array.typed(Object).new(["Target Name:                                                    ", "Zielname:                                                    "]), Array.typed(Object).new(["Actions:                                                             ", "Aktionen:                                                             "]), Array.typed(Object).new(["OK to overwrite existing file filename?", ("Vorhandene Datei {0} ".to_u << 0x00fc << "berschreiben?")]), Array.typed(Object).new(["Cancel", "Abbrechen"]), Array.typed(Object).new(["CodeBase:", "Code-Basis:"]), Array.typed(Object).new(["SignedBy:", "Signiert von:"]), Array.typed(Object).new(["Add Principal", ("Principal hinzuf".to_u << 0x00fc << "gen")]), Array.typed(Object).new(["Edit Principal", "Principal bearbeiten"]), Array.typed(Object).new(["Remove Principal", ("Principal l".to_u << 0x00f6 << "schen")]), Array.typed(Object).new(["Principals:", "Principals:"]), Array.typed(Object).new(["  Add Permission", (" Berechtigung hinzuf".to_u << 0x00fc << "gen")]), Array.typed(Object).new(["  Edit Permission", (" Berechtigung ".to_u << 0x00e4 << "ndern")]), Array.typed(Object).new(["Remove Permission", ("Berechtigung l".to_u << 0x00f6 << "schen")]), Array.typed(Object).new(["Done", "Fertig"]), Array.typed(Object).new(["KeyStore URL:", "KeyStore-URL:"]), Array.typed(Object).new(["KeyStore Type:", "KeyStore-Typ:"]), Array.typed(Object).new(["KeyStore Provider:", "KeyStore-Anbieter:"]), Array.typed(Object).new(["KeyStore Password URL:", "KeyStore-Passwort-URL:"]), Array.typed(Object).new(["Principals", "Principals"]), Array.typed(Object).new(["  Edit Principal:", " Principal bearbeiten:"]), Array.typed(Object).new(["  Add New Principal:", (" Neuen Principal hinzuf".to_u << 0x00fc << "gen:")]), Array.typed(Object).new(["Permissions", "Berechtigungen"]), Array.typed(Object).new(["  Edit Permission:", (" Berechtigung ".to_u << 0x00e4 << "ndern:")]), Array.typed(Object).new(["  Add New Permission:", (" Neue Berechtigung hinzuf".to_u << 0x00fc << "gen:")]), Array.typed(Object).new(["Signed By:", "Signiert von:"]), Array.typed(Object).new(["Cannot Specify Principal with a Wildcard Class without a Wildcard Name", "Principal kann nicht mit einer Wildcard-Klasse ohne Wildcard-Namen angegeben werden"]), Array.typed(Object).new(["Cannot Specify Principal without a Name", "Principal kann nicht ohne einen Namen angegeben werden"]), Array.typed(Object).new(["Permission and Target Name must have a value", ("Berechtigung und Zielname m".to_u << 0x00fc << "ssen einen Wert haben")]), Array.typed(Object).new(["Remove this Policy Entry?", ("Diesen Richtlinieneintrag l".to_u << 0x00f6 << "schen?")]), Array.typed(Object).new(["Overwrite File", ("Datei ".to_u << 0x00fc << "berschreiben")]), Array.typed(Object).new(["Policy successfully written to filename", "Richtlinien erfolgreich in {0} geschrieben"]), Array.typed(Object).new(["null filename", "Null als Dateiname"]), Array.typed(Object).new(["Save changes?", ("".to_u << 0x00c4 << "nderungen speichern?")]), Array.typed(Object).new(["Yes", "Ja"]), Array.typed(Object).new(["No", "Nein"]), Array.typed(Object).new(["Policy Entry", "Richtlinieneintrag"]), Array.typed(Object).new(["Save Changes", ("".to_u << 0x00c4 << "nderungen speichern")]), Array.typed(Object).new(["No Policy Entry selected", ("Kein Richtlinieneintrag ausgew".to_u << 0x00e4 << "hlt")]), Array.typed(Object).new(["Unable to open KeyStore: ex.toString()", ("KeyStore konnte nicht ge".to_u << 0x00f6 << "ffnet werden: {0}")]), Array.typed(Object).new(["No principal selected", ("Kein Principal ausgew".to_u << 0x00e4 << "hlt")]), Array.typed(Object).new(["No permission selected", ("Keine Berechtigung ausgew".to_u << 0x00e4 << "hlt")]), Array.typed(Object).new(["name", "Name"]), Array.typed(Object).new(["configuration type", "Konfigurationstyp"]), Array.typed(Object).new(["environment variable name", "Name der Umgebungsvariable"]), Array.typed(Object).new(["library name", "Bibliotheksname"]), Array.typed(Object).new(["package name", "Paketname"]), Array.typed(Object).new(["policy type", "Richtlinientyp"]), Array.typed(Object).new(["property name", "Eigenschaftsname"]), Array.typed(Object).new(["provider name", "Providername"]), Array.typed(Object).new(["Principal List", "Principal-Liste"]), Array.typed(Object).new(["Permission List", "Berechtigungsliste"]), Array.typed(Object).new(["Code Base", "Code-Basis"]), Array.typed(Object).new(["KeyStore U R L:", "KeyStore-URL:"]), Array.typed(Object).new(["KeyStore Password U R L:", "KeyStore-Passwort-URL:"]), Array.typed(Object).new(["invalid null input(s)", ("Ung".to_u << 0x00fc << "ltige Null-Eingabe(n)")]), Array.typed(Object).new(["actions can only be 'read'", ("Aktionen k".to_u << 0x00f6 << "nnen nur 'gelesen' werden")]), Array.typed(Object).new(["permission name [name] syntax invalid: ", ("Syntax f".to_u << 0x00fc << "r Berechtigungsnamen [{0}] ung".to_u << 0x00fc << "ltig: ")]), Array.typed(Object).new(["Credential Class not followed by a Principal Class and Name", "Nach Authentisierungsklasse folgt keine Principal-Klasse und kein Name."]), Array.typed(Object).new(["Principal Class not followed by a Principal Name", "Nach Principal-Klasse folgt kein Principal-Name"]), Array.typed(Object).new(["Principal Name must be surrounded by quotes", ("Principal-Name muss vorn und hinten mit Anf".to_u << 0x00fc << "hrungsstrichen versehen sein")]), Array.typed(Object).new(["Principal Name missing end quote", ("Abschlie".to_u << 0x00df << "endes Anf".to_u << 0x00fc << "hrungszeichen f".to_u << 0x00fc << "r Principal-Name fehlt")]), Array.typed(Object).new(["PrivateCredentialPermission Principal Class can not be a wildcard (*) value if Principal Name is not a wildcard (*) value", "Private Authentisierungsberechtigung Principal-Klasse kann kein Wildcardwert (*) sein, wenn der Principal-Name kein Wildcardwert (*) ist."]), Array.typed(Object).new(["CredOwner:\n\tPrincipal Class = class\n\tPrincipal Name = name", "Authentisierungsbesitzer:\n\tPrincipal-Klasse = {0}\n\tPrincipal-Name = {1}"]), Array.typed(Object).new(["provided null name", "hat Null als Namen geliefert"]), Array.typed(Object).new(["provided null keyword map", ("Leere Schl".to_u << 0x00fc << "sselwort-Map")]), Array.typed(Object).new(["provided null OID map", "Leere OID-Map"]), Array.typed(Object).new(["invalid null AccessControlContext provided", ("Ung".to_u << 0x00fc << "ltige Null als Zugangskontrollkontext geliefert")]), Array.typed(Object).new(["invalid null action provided", ("Ung".to_u << 0x00fc << "ltige Null als Aktion geliefert")]), Array.typed(Object).new(["invalid null Class provided", ("Ung".to_u << 0x00fc << "ltige Null als Klasse geliefert")]), Array.typed(Object).new(["Subject:\n", "Betreff:\n"]), Array.typed(Object).new(["\tPrincipal: ", "\tPrincipal: "]), Array.typed(Object).new(["\tPublic Credential: ", ("\t".to_u << 0x00d6 << "ffentliche Authentisierung: ")]), Array.typed(Object).new(["\tPrivate Credentials inaccessible\n", ("\tKein Zugriff auf private Authentisierungen m".to_u << 0x00f6 << "glich\n")]), Array.typed(Object).new(["\tPrivate Credential: ", "\tPrivate Authentisierung: "]), Array.typed(Object).new(["\tPrivate Credential inaccessible\n", ("\tKein Zugriff auf private Authentisierung m".to_u << 0x00f6 << "glich\n")]), Array.typed(Object).new(["Subject is read-only", ("Betreff ist schreibgesch".to_u << 0x00fc << "tzt")]), Array.typed(Object).new(["attempting to add an object which is not an instance of java.security.Principal to a Subject's Principal Set", ("Es wird versucht, ein Objekt hinzuzuf".to_u << 0x00fc << "gen, das keine Instanz von java.security.Principal f".to_u << 0x00fc << "r eine Principal-Gruppe eines Betreffs ist.")]), Array.typed(Object).new(["attempting to add an object which is not an instance of class", ("Es wird versucht, ein Objekt hinzuzuf".to_u << 0x00fc << "gen, das keine Instanz von {0} ist.")]), Array.typed(Object).new(["LoginModuleControlFlag: ", "Anmeldemodul-Steuerflag: "]), Array.typed(Object).new(["Invalid null input: name", ("Ung".to_u << 0x00fc << "ltige Nulleingabe: Name")]), Array.typed(Object).new(["No LoginModules configured for name", ("F".to_u << 0x00fc << "r {0} sind keine Anmeldemodule konfiguriert.")]), Array.typed(Object).new(["invalid null Subject provided", ("Ung".to_u << 0x00fc << "ltige Null als Betreff geliefert")]), Array.typed(Object).new(["invalid null CallbackHandler provided", ("Ung".to_u << 0x00fc << "ltige Null als Callback-Handler geliefert")]), Array.typed(Object).new(["null subject - logout called before login", "Null-Betreff - Abmeldung vor Anmeldung aufgerufen"]), Array.typed(Object).new(["unable to instantiate LoginModule, module, because it does not provide a no-argument constructor", "Es kann keine Instanz des Anmeldemoduls {0} erstellt werden, weil es keinen argumentlosen Konstruktor liefert."]), Array.typed(Object).new(["unable to instantiate LoginModule", "Es kann keine Instanz des Anmeldemoduls erstellt werden."]), Array.typed(Object).new(["unable to instantiate LoginModule: ", "LoginModule konnte nicht instanziiert werden: "]), Array.typed(Object).new(["unable to find LoginModule class: ", "Die Anmeldemodulklasse kann nicht gefunden werden: "]), Array.typed(Object).new(["unable to access LoginModule: ", ("Kein Zugriff auf Anmeldemodul m".to_u << 0x00f6 << "glich: ")]), Array.typed(Object).new(["Login Failure: all modules ignored", "Anmeldefehler: Alle Module werden ignoriert"]), Array.typed(Object).new(["java.security.policy: error parsing policy:\n\tmessage", "java.security.policy: Fehler bei Analyse {0}:\n\t{1}"]), Array.typed(Object).new(["java.security.policy: error adding Permission, perm:\n\tmessage", ("java.security.policy: Fehler beim Hinzuf".to_u << 0x00fc << "gen der Genehmigung, {0}:\n\t{1}")]), Array.typed(Object).new(["java.security.policy: error adding Entry:\n\tmessage", ("java.security.policy: Fehler beim Hinzuf".to_u << 0x00fc << "gen des Eintrags:\n\t{0}")]), Array.typed(Object).new(["alias name not provided (pe.name)", "Aliasname nicht bereitgestellt ({0})"]), Array.typed(Object).new(["unable to perform substitution on alias, suffix", ("kann Substition von Alias nicht durchf".to_u << 0x00fc << "hren, {0}")]), Array.typed(Object).new(["substitution value, prefix, unsupported", ("Substitutionswert, {0}, nicht unterst".to_u << 0x00fc << "tzt")]), Array.typed(Object).new(["(", "("]), Array.typed(Object).new([")", ")"]), Array.typed(Object).new(["type can't be null", "Typ kann nicht Null sein"]), Array.typed(Object).new(["keystorePasswordURL can not be specified without also specifying keystore", "keystorePasswordURL kann nicht ohne Keystore angegeben werden"]), Array.typed(Object).new(["expected keystore type", "erwarteter Keystore-Typ"]), Array.typed(Object).new(["expected keystore provider", "erwarteter Keystore-Provider"]), Array.typed(Object).new(["multiple Codebase expressions", ("mehrere Codebase-Ausdr".to_u << 0x00fc << "cke")]), Array.typed(Object).new(["multiple SignedBy expressions", ("mehrere SignedBy-Ausdr".to_u << 0x00fc << "cke")]), Array.typed(Object).new(["SignedBy has empty alias", "Leerer Alias in SignedBy"]), Array.typed(Object).new(["can not specify Principal with a wildcard class without a wildcard name", "Kann Principal nicht mit einer Wildcard-Klasse ohne Wildcard-Namen angeben."]), Array.typed(Object).new(["expected codeBase or SignedBy or Principal", "CodeBase oder SignedBy oder Principal erwartet"]), Array.typed(Object).new(["expected permission entry", "Berechtigungseintrag erwartet"]), Array.typed(Object).new(["number ", "Nummer "]), Array.typed(Object).new(["expected [expect], read [end of file]", "erwartet [{0}], gelesen [Dateiende]"]), Array.typed(Object).new(["expected [;], read [end of file]", "erwartet [;], gelesen [Dateiende]"]), Array.typed(Object).new(["line number: msg", "Zeile {0}: {1}"]), Array.typed(Object).new(["line number: expected [expect], found [actual]", "Zeile {0}: erwartet [{1}], gefunden [{2}]"]), Array.typed(Object).new(["null principalClass or principalName", "Principal-Klasse oder Principal-Name Null"]), Array.typed(Object).new(["PKCS11 Token [providerName] Password: ", ("Passwort f".to_u << 0x00fc << "r PKCS11-Token [{0}]: ")]), Array.typed(Object).new(["unable to instantiate Subject-based policy", "auf Subject basierende Richtlinie konnte nicht instanziiert werden"])]) }
      const_attr_reader  :Contents
    }
    
    typesig { [] }
    # Returns the contents of this <code>ResourceBundle</code>.
    # 
    # <p>
    # 
    # @return the contents of this <code>ResourceBundle</code>.
    def get_contents
      return Contents
    end
    
    typesig { [] }
    def initialize
      super()
    end
    
    private
    alias_method :initialize__resources_de, :initialize
  end
  
end
