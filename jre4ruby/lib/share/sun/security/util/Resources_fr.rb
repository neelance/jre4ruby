require "rjava"

# Copyright 2001-2006 Sun Microsystems, Inc.  All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
# 
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the LICENSE file that accompanied this code.
# 
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
# 
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
# 
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
# CA 95054 USA or visit www.sun.com if you need additional information or
# have any questions.
module Sun::Security::Util
  module Resources_frImports
    class_module.module_eval {
      include ::Java::Lang
      include ::Sun::Security::Util
    }
  end
  
  # <p> This class represents the <code>ResourceBundle</code>
  # for javax.security.auth and sun.security.
  class Resources_fr < Java::Util::ListResourceBundle
    include_class_members Resources_frImports
    
    class_module.module_eval {
      # shared (from jarsigner)
      # shared (from keytool)
      # keytool
      # Translators of the following 5 pairs, ATTENTION:
      # the next 5 string pairs are meant to be combined into 2 paragraphs,
      # 1+3+4 and 2+3+5. make sure your translation also does.
      # rest is same as -certreq starting from -keystore *
      # {"-export      [-v] [-rfc] [-protected]",
      # "-export      [-v] [-rfc] [-protected]"},
      # rest is same as -certreq starting from -keystore *
      # {"-genkey      [-v] [-protected]",
      # "-genkey      [-v] [-protected]"},
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # {"-identitydb  [-v] [-protected]",
      # "-identitydb  [-v] [-protected]"},
      # {"\t     [-file <idb_file>]", "\t     [-file <idb_file>]"},
      # rest is same as -certreq starting from -keystore *
      # {"-import      [-v] [-noprompt] [-trustcacerts] [-protected]",
      # "-import      [-v] [-noprompt] [-trustcacerts] [-protected]"},
      # rest is same as -certreq starting from -keystore *
      # ligne trop longue, scind\u00e9e
      # rest is same as -certreq starting from -keystore *
      # {"-keyclone    [-v] [-protected]",
      # "-keyclone    [-v] [-protected]"},
      # {"\t     [-alias <alias>] -dest <dest_alias>",
      # "\t     [-alias <alias>] -dest <dest_alias>"},
      # {"\t     [-keypass <keypass>] [-new <new_keypass>]",
      # "\t     [-keypass <keypass>] [-new <new_keypass>]"},
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # {"-selfcert    [-v] [-protected]",
      # "-selfcert    [-v] [-protected]"},
      # {"\t     [-dname <dname>] [-validity <valDays>]",
      # "\t     [-dname <dname>] [-validity <valDays>]"},
      # {"\t     [-keypass <keypass>] [-sigalg <sigalg>]",
      # "\t     [-keypass <keypass>] [-sigalg <sigalg>]"},
      # rest is same as -certreq starting from -keystore *
      # rest is same as -certreq starting from -keystore *
      # policytool
      # javax.security.auth.PrivateCredentialPermission
      # javax.security.auth.x500
      # javax.security.auth.Subject
      # javax.security.auth.login.AppConfigurationEntry
      # javax.security.auth.login.LoginContext
      # sun.security.provider.PolicyFile
      # sun.security.provider.PolicyParser
      # sun.security.pkcs11.SunPKCS11
      # --- DEPRECATED ---
      # javax.security.auth.Policy
      const_set_lazy(:Contents) { Array.typed(Array.typed(Object)).new([Array.typed(Object).new([" ", " "]), Array.typed(Object).new(["  ", "  "]), Array.typed(Object).new(["      ", "      "]), Array.typed(Object).new([", ", ", "]), Array.typed(Object).new(["\n", "\n"]), Array.typed(Object).new(["*******************************************", "*******************************************"]), Array.typed(Object).new(["*******************************************\n\n", "*******************************************"]), Array.typed(Object).new(["keytool error: ", "erreur keytool : "]), Array.typed(Object).new(["Illegal option:  ", "Option non valide :  "]), Array.typed(Object).new(["Try keytool -help", "Essayez keytool -help"]), Array.typed(Object).new(["Command option <flag> needs an argument.", "L'option de commande {0} requiert un argument."]), Array.typed(Object).new(["Warning:  Different store and key passwords not supported for PKCS12 KeyStores. Ignoring user-specified <command> value.", ("Avertissement".to_u << 0x00a0 << ":  Les mots de passe store et key distincts ne sont pas pris en charge pour les keystores PKCS12. La valeur {0} sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << "e par l'utilisateur est ignor".to_u << 0x00e9 << "e.")]), Array.typed(Object).new(["-keystore must be NONE if -storetype is {0}", ("-keystore doit ".to_u << 0x00ea << "tre d".to_u << 0x00e9 << "fini sur NONE si -storetype est {0}")]), Array.typed(Object).new(["Too may retries, program terminated", "Trop de tentatives, fin du programme"]), Array.typed(Object).new(["-storepasswd and -keypasswd commands not supported if -storetype is {0}", ("Les commandes -storepasswd et -keypasswd ne sont pas prises en charge si -storetype est d".to_u << 0x00e9 << "fini sur {0}")]), Array.typed(Object).new(["-keypasswd commands not supported if -storetype is PKCS12", ("Les commandes -keypasswd ne sont pas prises en charge si -storetype est d".to_u << 0x00e9 << "fini sur PKCS12")]), Array.typed(Object).new(["-keypass and -new can not be specified if -storetype is {0}", ("Les commandes -keypass et -new ne peuvent pas ".to_u << 0x00ea << "tre sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << "es si -storetype est d".to_u << 0x00e9 << "fini sur {0}")]), Array.typed(Object).new(["if -protected is specified, then -storepass, -keypass, and -new must not be specified", ("si -protected est sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << ", alors -storepass, -keypass et -new ne doivent pas ".to_u << 0x00ea << "tre sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << "s")]), Array.typed(Object).new(["if -srcprotected is specified, then -srcstorepass and -srckeypass must not be specified", ("Si ".to_u << 0x0096 << "srcprotected est sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << ", alors -srcstorepass et ".to_u << 0x0096 << "srckeypass ne doivent pas ".to_u << 0x00ea << "tre sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << "s")]), Array.typed(Object).new(["if keystore is not password protected, then -storepass, -keypass, and -new must not be specified", ("Si le keystore n'est pas prot".to_u << 0x00e9 << "g".to_u << 0x00e9 << " par un mot de passe, les commandes -storepass, -keypass et -new ne doivent pas ".to_u << 0x00ea << "tre sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << "es")]), Array.typed(Object).new(["if source keystore is not password protected, then -srcstorepass and -srckeypass must not be specified", ("Si le keystore source n'est pas prot".to_u << 0x00e9 << "g".to_u << 0x00e9 << " par un mot de passe, les commandes -srcstorepass et -srckeypass ne doivent pas ".to_u << 0x00ea << "tre sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << "es")]), Array.typed(Object).new(["Validity must be greater than zero", ("La validit".to_u << 0x00e9 << " doit ".to_u << 0x00ea << "tre sup".to_u << 0x00e9 << "rieure ".to_u << 0x00e0 << " z".to_u << 0x00e9 << "ro")]), Array.typed(Object).new(["provName not a provider", "{0} n''est pas un fournisseur"]), Array.typed(Object).new(["Usage error: no command provided", ("Erreur d'utilisation".to_u << 0x00a0 << ": aucune commande fournie")]), Array.typed(Object).new(["Usage error, <arg> is not a legal command", "Erreur d'utilisation, {0} n'est pas une commande valide"]), Array.typed(Object).new(["Source keystore file exists, but is empty: ", ("Le fichier du keystore source existe, mais il est vide".to_u << 0x00a0 << ": ")]), Array.typed(Object).new(["Please specify -srckeystore", ("veuillez sp".to_u << 0x00e9 << "cifier -srckeystore")]), Array.typed(Object).new(["Must not specify both -v and -rfc with 'list' command", ("-v et -rfc ne peuvent ".to_u << 0x00ea << "tre sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << "s simultan".to_u << 0x00e9 << "ment avec la commande 'list'")]), Array.typed(Object).new(["Key password must be at least 6 characters", ("Un mot de passe de cl".to_u << 0x00e9 << " doit comporter au moins 6 caract".to_u << 0x00e8 << "res")]), Array.typed(Object).new(["New password must be at least 6 characters", ("Le nouveau mot de passe doit comporter au moins 6 caract".to_u << 0x00e8 << "res")]), Array.typed(Object).new(["Keystore file exists, but is empty: ", "Fichier Keystore existant mais vide : "]), Array.typed(Object).new(["Keystore file does not exist: ", "Fichier Keystore introuvable : "]), Array.typed(Object).new(["Must specify destination alias", ("L'alias de destination doit ".to_u << 0x00ea << "tre sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << "")]), Array.typed(Object).new(["Must specify alias", ("Vous devez sp".to_u << 0x00e9 << "cifier un alias")]), Array.typed(Object).new(["Keystore password must be at least 6 characters", ("Un mot de passe de Keystore doit comporter au moins 6 caract".to_u << 0x00e8 << "res")]), Array.typed(Object).new(["Enter keystore password:  ", "Tapez le mot de passe du Keystore :  "]), Array.typed(Object).new(["Enter source keystore password:  ", ("Saisissez le mot de passe du keystore source".to_u << 0x00a0 << ":  ")]), Array.typed(Object).new(["Enter destination keystore password:  ", ("Saisissez le mot de passe du keystore de destination".to_u << 0x00a0 << ":  ")]), Array.typed(Object).new(["Keystore password is too short - must be at least 6 characters", ("Mot de passe de Keystore trop court, il doit compter au moins 6 caract".to_u << 0x00e8 << "res")]), Array.typed(Object).new(["Unknown Entry Type", ("Type d'entr".to_u << 0x00e9 << "e inconnu")]), Array.typed(Object).new(["Too many failures. Alias not changed", ("Trop d'erreurs. Alias non modifi".to_u << 0x00e9 << "")]), Array.typed(Object).new(["Entry for alias <alias> successfully imported.", ("L'entr".to_u << 0x00e9 << "e de l'alias {0} a ".to_u << 0x00e9 << "t".to_u << 0x00e9 << " import".to_u << 0x00e9 << "e.")]), Array.typed(Object).new(["Entry for alias <alias> not imported.", ("L'entr".to_u << 0x00e9 << "e de l'alias {0} n'a pas ".to_u << 0x00e9 << "t".to_u << 0x00e9 << " import".to_u << 0x00e9 << "e.")]), Array.typed(Object).new(["Problem importing entry for alias <alias>: <exception>.\nEntry for alias <alias> not imported.", ("Probl".to_u << 0x00e8 << "me lors de l'importation de l'entr".to_u << 0x00e9 << "e de l'alias {0}".to_u << 0x00a0 << ": {1}.\nL'entr".to_u << 0x00e9 << "e de l'alias {0} n'a pas ".to_u << 0x00e9 << "t".to_u << 0x00e9 << " import".to_u << 0x00e9 << "e.")]), Array.typed(Object).new(["Import command completed:  <ok> entries successfully imported, <fail> entries failed or cancelled", ("Commande d'importation ex".to_u << 0x00e9 << "cut".to_u << 0x00e9 << "e".to_u << 0x00a0 << ":  {0} entr".to_u << 0x00e9 << "es import".to_u << 0x00e9 << "es, ".to_u << 0x00e9 << "chec ou annulation de {1} entr".to_u << 0x00e9 << "es")]), Array.typed(Object).new(["Warning: Overwriting existing alias <alias> in destination keystore", ("Avertissement".to_u << 0x00a0 << ": L'alias existant {0} est ".to_u << 0x00e9 << "cras".to_u << 0x00e9 << " dans le keystore de destination")]), Array.typed(Object).new(["Existing entry alias <alias> exists, overwrite? [no]:  ", ("L'alias d'entr".to_u << 0x00e9 << "e {0} existe d".to_u << 0x00e9 << "j".to_u << 0x00e0 << ", voulez-vous l'".to_u << 0x00e9 << "craser".to_u << 0x00a0 << "? [non]".to_u << 0x00a0 << ":  ")]), Array.typed(Object).new(["Too many failures - try later", ("Trop d'erreurs - r".to_u << 0x00e9 << "essayez plus tard")]), Array.typed(Object).new(["Certification request stored in file <filename>", ("Demande de certification enregistr".to_u << 0x00e9 << "e dans le fichier <{0}>")]), Array.typed(Object).new(["Submit this to your CA", ("Soumettre ".to_u << 0x00e0 << " votre CA")]), Array.typed(Object).new(["if alias not specified, destalias, srckeypass, and destkeypass must not be specified", ("si l'alias n'est pas sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << ", destalias, srckeypass et destkeypass ne doivent pas ".to_u << 0x00ea << "tre sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << "s")]), Array.typed(Object).new(["Certificate stored in file <filename>", ("Certificat enregistr".to_u << 0x00e9 << " dans le fichier <{0}>")]), Array.typed(Object).new(["Certificate reply was installed in keystore", ("R".to_u << 0x00e9 << "ponse de certificat install".to_u << 0x00e9 << "e dans le Keystore")]), Array.typed(Object).new(["Certificate reply was not installed in keystore", ("R".to_u << 0x00e9 << "ponse de certificat non install".to_u << 0x00e9 << "e dans le Keystore")]), Array.typed(Object).new(["Certificate was added to keystore", ("Certificat ajout".to_u << 0x00e9 << " au Keystore")]), Array.typed(Object).new(["Certificate was not added to keystore", ("Certificat non ajout".to_u << 0x00e9 << " au Keystore")]), Array.typed(Object).new(["[Storing ksfname]", "[Stockage de {0}]"]), Array.typed(Object).new(["alias has no public key (certificate)", ("{0} ne poss".to_u << 0x00e8 << "de pas de cl".to_u << 0x00e9 << " publique (certificat)")]), Array.typed(Object).new(["Cannot derive signature algorithm", ("Impossible de d".to_u << 0x00e9 << "duire l'algorithme de signature")]), Array.typed(Object).new(["Alias <alias> does not exist", "Alias <{0}> introuvable"]), Array.typed(Object).new(["Alias <alias> has no certificate", ("L''alias <{0}> ne poss".to_u << 0x00e8 << "de pas de certificat")]), Array.typed(Object).new(["Key pair not generated, alias <alias> already exists", ("Paire de cl".to_u << 0x00e9 << "s non g".to_u << 0x00e9 << "n".to_u << 0x00e9 << "r".to_u << 0x00e9 << "e, l''alias <{0}> existe d".to_u << 0x00e9 << "j".to_u << 0x00e0 << "")]), Array.typed(Object).new(["Cannot derive signature algorithm", ("Impossible de d".to_u << 0x00e9 << "duire l'algorithme de signature")]), Array.typed(Object).new(["Generating keysize bit keyAlgName key pair and self-signed certificate (sigAlgName) with a validity of validality days\n\tfor: x500Name", ("G".to_u << 0x00e9 << "n".to_u << 0x00e9 << "ration d''une paire de cl".to_u << 0x00e9 << "s {1} de {0} bits et d''un certificat autosign".to_u << 0x00e9 << " ({2}) d''une validit".to_u << 0x00e9 << " de {3} jours\n\tpour : {4}")]), Array.typed(Object).new(["Enter key password for <alias>", ("Sp".to_u << 0x00e9 << "cifiez le mot de passe de la cl".to_u << 0x00e9 << " pour <{0}>")]), Array.typed(Object).new(["\t(RETURN if same as keystore password):  ", ("\t(appuyez sur Entr".to_u << 0x00e9 << "e s'il s'agit du mot de passe du Keystore) :  ")]), Array.typed(Object).new(["Key password is too short - must be at least 6 characters", ("Le mot de passe de cl".to_u << 0x00e9 << " doit comporter au moins 6 caract".to_u << 0x00e8 << "res.")]), Array.typed(Object).new(["Too many failures - key not added to keystore", ("Trop d'erreurs - cl".to_u << 0x00e9 << " non ajout".to_u << 0x00e9 << "e au Keystore")]), Array.typed(Object).new(["Destination alias <dest> already exists", ("L''alias de la destination <{0}> existe d".to_u << 0x00e9 << "j".to_u << 0x00e0 << "")]), Array.typed(Object).new(["Password is too short - must be at least 6 characters", ("Le mot de passe doit comporter au moins 6 caract".to_u << 0x00e8 << "res.")]), Array.typed(Object).new(["Too many failures. Key entry not cloned", ("Trop d'erreurs. Entr".to_u << 0x00e9 << "e de cl".to_u << 0x00e9 << " non clon".to_u << 0x00e9 << "e")]), Array.typed(Object).new(["key password for <alias>", ("mot de passe de cl".to_u << 0x00e9 << " pour <{0}>")]), Array.typed(Object).new(["Keystore entry for <id.getName()> already exists", ("L''entr".to_u << 0x00e9 << "e Keystore pour <{0}> existe d".to_u << 0x00e9 << "j".to_u << 0x00e0 << "")]), Array.typed(Object).new(["Creating keystore entry for <id.getName()> ...", ("Cr".to_u << 0x00e9 << "ation d''une entr".to_u << 0x00e9 << "e keystore pour <{0}> ...")]), Array.typed(Object).new(["No entries from identity database added", ("Aucune entr".to_u << 0x00e9 << "e ajout".to_u << 0x00e9 << "e ".to_u << 0x00e0 << " partir de la base de donn".to_u << 0x00e9 << "es d'identit".to_u << 0x00e9 << "s")]), Array.typed(Object).new(["Alias name: alias", "Nom d''alias : {0}"]), Array.typed(Object).new(["Creation date: keyStore.getCreationDate(alias)", ("Date de cr".to_u << 0x00e9 << "ation : {0,date}")]), Array.typed(Object).new(["alias, keyStore.getCreationDate(alias), ", "{0}, {1,date}, "]), Array.typed(Object).new(["alias, ", "{0}, "]), Array.typed(Object).new(["Entry type: <type>", ("Type d'entr".to_u << 0x00e9 << "e".to_u << 0x00a0 << ": {0}")]), Array.typed(Object).new(["Certificate chain length: ", ("Longueur de cha".to_u << 0x00ee << "ne du certificat : ")]), Array.typed(Object).new(["Certificate[(i + 1)]:", "Certificat[{0,number,integer}]:"]), Array.typed(Object).new(["Certificate fingerprint (MD5): ", "Empreinte du certificat (MD5) : "]), Array.typed(Object).new(["Entry type: trustedCertEntry\n", ("Type d'entr".to_u << 0x00e9 << "e : trustedCertEntry\n")]), Array.typed(Object).new(["trustedCertEntry,", "trustedCertEntry,"]), Array.typed(Object).new(["Keystore type: ", "Type Keystore : "]), Array.typed(Object).new(["Keystore provider: ", "Fournisseur Keystore : "]), Array.typed(Object).new(["Your keystore contains keyStore.size() entry", ("Votre Keystore contient {0,number,integer} entr".to_u << 0x00e9 << "e(s)")]), Array.typed(Object).new(["Your keystore contains keyStore.size() entries", ("Votre Keystore contient {0,number,integer} entr".to_u << 0x00e9 << "e(s)")]), Array.typed(Object).new(["Failed to parse input", ("L'analyse de l'entr".to_u << 0x00e9 << "e a ".to_u << 0x00e9 << "chou".to_u << 0x00e9 << "")]), Array.typed(Object).new(["Empty input", ("Entr".to_u << 0x00e9 << "e vide")]), Array.typed(Object).new(["Not X.509 certificate", "Pas un certificat X.509"]), Array.typed(Object).new(["Cannot derive signature algorithm", ("Impossible de d".to_u << 0x00e9 << "duire l'algorithme de signature")]), Array.typed(Object).new(["alias has no public key", ("{0} ne poss".to_u << 0x00e8 << "de pas de cl".to_u << 0x00e9 << " publique")]), Array.typed(Object).new(["alias has no X.509 certificate", ("{0} ne poss".to_u << 0x00e8 << "de pas de certificat X.509")]), Array.typed(Object).new(["New certificate (self-signed):", ("Nouveau certificat (auto-sign".to_u << 0x00e9 << ") :")]), Array.typed(Object).new(["Reply has no certificates", ("La r".to_u << 0x00e9 << "ponse n'a pas de certificat")]), Array.typed(Object).new(["Certificate not imported, alias <alias> already exists", ("Certificat non import".to_u << 0x00e9 << ", l''alias <{0}> existe d".to_u << 0x00e9 << "j".to_u << 0x00e0 << "")]), Array.typed(Object).new(["Input not an X.509 certificate", ("L'entr".to_u << 0x00e9 << "e n'est pas un certificat X.509")]), Array.typed(Object).new(["Certificate already exists in keystore under alias <trustalias>", ("Le certificat existe d".to_u << 0x00e9 << "j".to_u << 0x00e0 << " dans le Keystore sous l''alias <{0}>")]), Array.typed(Object).new(["Do you still want to add it? [no]:  ", "Voulez-vous toujours l'ajouter ? [non] :  "]), Array.typed(Object).new(["Certificate already exists in system-wide CA keystore under alias <trustalias>", ("Le certificat existe d".to_u << 0x00e9 << "j".to_u << 0x00e0 << " dans le Keystore CA syst".to_u << 0x00e8 << "me sous l''alias <{0}>alias <{0}>")]), Array.typed(Object).new(["Do you still want to add it to your own keystore? [no]:  ", ("Voulez-vous toujours l'ajouter ".to_u << 0x00e0 << " votre Keystore ? [non] :  ")]), Array.typed(Object).new(["Trust this certificate? [no]:  ", ("Faire confiance ".to_u << 0x00e0 << " ce certificat ? [non] :  ")]), Array.typed(Object).new(["YES", "OUI"]), Array.typed(Object).new(["New prompt: ", "Nouveau {0} : "]), Array.typed(Object).new(["Passwords must differ", ("Les mots de passe doivent diff".to_u << 0x00e9 << "rer")]), Array.typed(Object).new(["Re-enter new prompt: ", ("Sp".to_u << 0x00e9 << "cifiez nouveau {0} : ")]), Array.typed(Object).new(["Re-enter new password: ", "Ressaisissez le nouveau mot de passe : "]), Array.typed(Object).new(["They don't match. Try again", ("ne correspondent pas. R".to_u << 0x00e9 << "essayez.")]), Array.typed(Object).new(["Enter prompt alias name:  ", ("Sp".to_u << 0x00e9 << "cifiez le nom d''alias {0} :  ")]), Array.typed(Object).new(["Enter new alias name\t(RETURN to cancel import for this entry):  ", ("Saisissez le nom du nouvel alias\t(ou appuyez sur ENTR".to_u << 0x00c9 << "E pour annuler l'importation pour cette entr".to_u << 0x00e9 << "e)".to_u << 0x00a0 << ":  ")]), Array.typed(Object).new(["Enter alias name:  ", ("Sp".to_u << 0x00e9 << "cifiez le nom d'alias :  ")]), Array.typed(Object).new(["\t(RETURN if same as for <otherAlias>)", ("\t(appuyez sur Entr".to_u << 0x00e9 << "e si le r".to_u << 0x00e9 << "sultat est identique ".to_u << 0x00e0 << " <{0}>)")]), Array.typed(Object).new(["*PATTERN* printX509Cert", ("Propri".to_u << 0x00e9 << "taire".to_u << 0x00a0 << ": {0}\n".to_u << 0x00c9 << "metteur".to_u << 0x00a0 << ": {1}\nNum".to_u << 0x00e9 << "ro de s".to_u << 0x00e9 << "rie".to_u << 0x00a0 << ": {2}\nValide du".to_u << 0x00a0 << ": {3} au".to_u << 0x00a0 << ": {4}\nEmpreintes du certificat".to_u << 0x00a0 << ":\n\t MD5".to_u << 0x00a0 << ":  {5}\n\t SHA1".to_u << 0x00a0 << ": {6}\n\t Nom de l'algorithme de signature".to_u << 0x00a0 << ": {7}\n\t Version".to_u << 0x00a0 << ": {8}")]), Array.typed(Object).new(["What is your first and last name?", ("Quels sont vos pr".to_u << 0x00e9 << "nom et nom ?")]), Array.typed(Object).new(["What is the name of your organizational unit?", ("Quel est le nom de votre unit".to_u << 0x00e9 << " organisationnelle ?")]), Array.typed(Object).new(["What is the name of your organization?", "Quelle est le nom de votre organisation ?"]), Array.typed(Object).new(["What is the name of your City or Locality?", ("Quel est le nom de votre ville de r".to_u << 0x00e9 << "sidence ?")]), Array.typed(Object).new(["What is the name of your State or Province?", ("Quel est le nom de votre ".to_u << 0x00e9 << "tat ou province ?")]), Array.typed(Object).new(["What is the two-letter country code for this unit?", ("Quel est le code de pays ".to_u << 0x00e0 << " deux lettres pour cette unit".to_u << 0x00e9 << " ?")]), Array.typed(Object).new(["Is <name> correct?", "Est-ce {0} ?"]), Array.typed(Object).new(["no", "non"]), Array.typed(Object).new(["yes", "oui"]), Array.typed(Object).new(["y", "o"]), Array.typed(Object).new(["  [defaultValue]:  ", "  [{0}] :  "]), Array.typed(Object).new(["Alias <alias> has no key", ("L'alias <{0}> n'est associ".to_u << 0x00e9 << " ".to_u << 0x00e0 << " aucune cl".to_u << 0x00e9 << "")]), Array.typed(Object).new(["Alias <alias> references an entry type that is not a private key entry.  The -keyclone command only supports cloning of private key entries", ("L'entr".to_u << 0x00e9 << "e ".to_u << 0x00e0 << " laquelle l'alias <{0}> fait r".to_u << 0x00e9 << "f".to_u << 0x00e9 << "rence n'est pas une entr".to_u << 0x00e9 << "e de type cl".to_u << 0x00e9 << " priv".to_u << 0x00e9 << "e.  La commande -keyclone prend uniquement en charge le clonage des cl".to_u << 0x00e9 << "s priv".to_u << 0x00e9 << "es")]), Array.typed(Object).new(["*****************  WARNING WARNING WARNING  *****************", "*****************  A V E R T I S S E M E N T  *****************"]), Array.typed(Object).new(["* The integrity of the information stored in your keystore  *", ("* L'int".to_u << 0x00e9 << "grit".to_u << 0x00e9 << " des informations enregistr".to_u << 0x00e9 << "es dans votre Keystore  *")]), Array.typed(Object).new(["* The integrity of the information stored in the srckeystore*", ("* L'int".to_u << 0x00e9 << "grit".to_u << 0x00e9 << " des informations enregistr".to_u << 0x00e9 << "es dans srckeystore*")]), Array.typed(Object).new(["* has NOT been verified!  In order to verify its integrity, *", ("* n'a PAS ".to_u << 0x00e9 << "t".to_u << 0x00e9 << " v".to_u << 0x00e9 << "rifi".to_u << 0x00e9 << "e !  Pour cela, *")]), Array.typed(Object).new(["* you must provide your keystore password.                  *", ("* vous devez sp".to_u << 0x00e9 << "cifier le mot de passe de votre Keystore.                  *")]), Array.typed(Object).new(["* you must provide the srckeystore password.                *", "* vous devez fournir le mot de passe srckeystore.                *"]), Array.typed(Object).new(["Certificate reply does not contain public key for <alias>", ("La r".to_u << 0x00e9 << "ponse au certificat ne contient pas de cl".to_u << 0x00e9 << " publique pour <{0}>")]), Array.typed(Object).new(["Incomplete certificate chain in reply", ("Cha".to_u << 0x00ee << "ne de certificat incompl".to_u << 0x00e8 << "te dans la r".to_u << 0x00e9 << "ponse")]), Array.typed(Object).new(["Certificate chain in reply does not verify: ", ("La cha".to_u << 0x00ee << "ne de certificat de la r".to_u << 0x00e9 << "ponse ne concorde pas : ")]), Array.typed(Object).new(["Top-level certificate in reply:\n", ("Certificat du plus haut niveau dans la r".to_u << 0x00e9 << "ponse :\n")]), Array.typed(Object).new(["... is not trusted. ", "... n'est pas digne de confiance. "]), Array.typed(Object).new(["Install reply anyway? [no]:  ", ("Installer la r".to_u << 0x00e9 << "ponse quand m".to_u << 0x00ea << "me ? [non] :  ")]), Array.typed(Object).new(["NO", "NON"]), Array.typed(Object).new(["Public keys in reply and keystore don't match", ("Les cl".to_u << 0x00e9 << "s publiques de la r".to_u << 0x00e9 << "ponse et du Keystore ne concordent pas")]), Array.typed(Object).new(["Certificate reply and certificate in keystore are identical", ("La r".to_u << 0x00e9 << "ponse au certificat et le certificat du Keystore sont identiques")]), Array.typed(Object).new(["Failed to establish chain from reply", ("Impossible de cr".to_u << 0x00e9 << "er une cha".to_u << 0x00ee << "ne ".to_u << 0x00e0 << " partir de la r".to_u << 0x00e9 << "ponse")]), Array.typed(Object).new(["n", "n"]), Array.typed(Object).new(["Wrong answer, try again", ("R".to_u << 0x00e9 << "ponse incorrecte, recommencez")]), Array.typed(Object).new(["Secret key not generated, alias <alias> already exists", ("Cl".to_u << 0x00e9 << " secr".to_u << 0x00e8 << "te non g".to_u << 0x00e9 << "n".to_u << 0x00e9 << "r".to_u << 0x00e9 << "e, l'alias <{0}> existe d".to_u << 0x00e9 << "j".to_u << 0x00e0 << "")]), Array.typed(Object).new(["Please provide -keysize for secret key generation", ("Veuillez sp".to_u << 0x00e9 << "cifier -keysize pour la g".to_u << 0x00e9 << "n".to_u << 0x00e9 << "ration de la cl".to_u << 0x00e9 << " secr".to_u << 0x00e8 << "te")]), Array.typed(Object).new(["keytool usage:\n", "Syntaxe keytool :\n"]), Array.typed(Object).new(["Extensions: ", ("Extensions".to_u << 0x00a0 << ": ")]), Array.typed(Object).new(["-certreq     [-v] [-protected]", "-certreq     [-v] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>] [-sigalg <sigalg>]", "\t     [-alias <alias>] [-sigalg <sigalg>]"]), Array.typed(Object).new(["\t     [-file <csr_file>] [-keypass <keypass>]", ("\t     [-file <csr_file>] [-keypass <mot_passe_cl".to_u << 0x00e9 << ">]")]), Array.typed(Object).new(["\t     [-keystore <keystore>] [-storepass <storepass>]", "\t     [-keystore <keystore>] [-storepass <mot_passe_store>]"]), Array.typed(Object).new(["\t     [-storetype <storetype>] [-providername <name>]", "\t     [-storetype <storetype>] [-providername <name>]"]), Array.typed(Object).new(["\t     [-providerclass <provider_class_name> [-providerarg <arg>]] ...", "\t     [-providerclass <provider_class_name> [-providerarg <arg>]] ..."]), Array.typed(Object).new(["\t     [-providerpath <pathlist>]", "\t     [-providerpath <pathlist>]"]), Array.typed(Object).new(["-delete      [-v] [-protected] -alias <alias>", "-delete      [-v] [-protected] -alias <alias>"]), Array.typed(Object).new(["-exportcert  [-v] [-rfc] [-protected]", "-exportcert  [-v] [-rfc] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>] [-file <cert_file>]", "\t     [-alias <alias>] [-file <fichier_cert>]"]), Array.typed(Object).new(["-genkeypair  [-v] [-protected]", "-genkeypair  [-v] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <alias>]"]), Array.typed(Object).new(["\t     [-keyalg <keyalg>] [-keysize <keysize>]", ("\t     [-keyalg <keyalg>] [-keysize <taille_cl".to_u << 0x00e9 << ">]")]), Array.typed(Object).new(["\t     [-sigalg <sigalg>] [-dname <dname>]", "\t     [-sigalg <sigalg>] [-dname <nomd>]"]), Array.typed(Object).new(["\t     [-validity <valDays>] [-keypass <keypass>]", ("\t     [-validity <joursVal>] [-keypass <mot_passe_cl".to_u << 0x00e9 << ">]")]), Array.typed(Object).new(["-genseckey   [-v] [-protected]", "-genkeypair  [-v] [-protected]"]), Array.typed(Object).new(["-help", "-help"]), Array.typed(Object).new(["-importcert  [-v] [-noprompt] [-trustcacerts] [-protected]", "-importcert  [-v] [-noprompt] [-trustcacerts] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <alias>]"]), Array.typed(Object).new(["\t     [-alias <alias>] [-keypass <keypass>]", "\t     [-alias <alias>] [-keypass <keypass>]"]), Array.typed(Object).new(["\t     [-file <cert_file>] [-keypass <keypass>]", ("\t     [-file <fichier_cert>] [-keypass <mot_passe_cl".to_u << 0x00e9 << ">]")]), Array.typed(Object).new(["-importkeystore [-v] ", "-importkeystore [-v] "]), Array.typed(Object).new(["\t     [-srckeystore <srckeystore>] [-destkeystore <destkeystore>]", "\t     [-srckeystore <srckeystore>] [-destkeystore <destkeystore>]"]), Array.typed(Object).new(["\t     [-srcstoretype <srcstoretype>] [-deststoretype <deststoretype>]", "\t     [-srcstoretype <srcstoretype>] [-deststoretype <deststoretype>]"]), Array.typed(Object).new(["\t     [-srcprotected] [-destprotected]", "\t     [-srcprotected] [-destprotected]"]), Array.typed(Object).new(["\t     [-srcstorepass <srcstorepass>] [-deststorepass <deststorepass>]", "\t     [-srcstorepass <srcstorepass>] [-deststorepass <deststorepass>]"]), Array.typed(Object).new(["\t     [-srcprovidername <srcprovidername>]\n\t     [-destprovidername <destprovidername>]", "\t     [-srcprovidername <srcprovidername>]\n\t     [-destprovidername <destprovidername>]"]), Array.typed(Object).new(["\t     [-srcalias <srcalias> [-destalias <destalias>]", "\t     [-srcalias <srcalias> [-destalias <destalias>]"]), Array.typed(Object).new(["\t       [-srckeypass <srckeypass>] [-destkeypass <destkeypass>]]", "\t       [-srckeypass <srckeypass>] [-destkeypass <destkeypass>]]"]), Array.typed(Object).new(["\t     [-noprompt]", "\t     [-noprompt]"]), Array.typed(Object).new(["-changealias [-v] [-protected] -alias <alias> -destalias <destalias>", "-changealias [-v] [-protected] -alias <alias> -destalias <destalias>"]), Array.typed(Object).new(["\t     [-keypass <keypass>]", "\t     [-keypass <keypass>]"]), Array.typed(Object).new(["-keypasswd   [-v] [-alias <alias>]", "-keypasswd   [-v] [-alias <alias>]"]), Array.typed(Object).new(["\t     [-keypass <old_keypass>] [-new <new_keypass>]", ("\t     [-keypass <ancien_mot_passe_cl".to_u << 0x00e9 << ">] [-new <nouveau_mot_passe_cl".to_u << 0x00e9 << ">]")]), Array.typed(Object).new(["-list        [-v | -rfc] [-protected]", "-list        [-v | -rfc] [-protected]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <alias>]"]), Array.typed(Object).new(["-printcert   [-v] [-file <cert_file>]", "-printcert   [-v] [-file <fichier_cert>]"]), Array.typed(Object).new(["\t     [-alias <alias>]", "\t     [-alias <alias>]"]), Array.typed(Object).new(["-storepasswd [-v] [-new <new_storepass>]", "-storepasswd [-v] [-new <new_storepass>]"]), Array.typed(Object).new(["Warning: A public key for alias 'signers[i]' does not exist.  Make sure a KeyStore is properly configured.", ("Avertissement".to_u << 0x00a0 << ": il n'existe pas de cl".to_u << 0x00e9 << " publique pour l'alias {0}.  V".to_u << 0x00e9 << "rifiez que le keystore est correctement configur".to_u << 0x00e9 << ".")]), Array.typed(Object).new(["Warning: Class not found: class", "Avertissement : Classe introuvable : {0}"]), Array.typed(Object).new(["Warning: Invalid argument(s) for constructor: arg", ("Avertissement".to_u << 0x00a0 << ": argument(s) non valide(s) pour le constructeur".to_u << 0x00a0 << ": {0}")]), Array.typed(Object).new(["Illegal Principal Type: type", "Type de mandant non admis : {0}"]), Array.typed(Object).new(["Illegal option: option", "Option non admise : {0}"]), Array.typed(Object).new(["Usage: policytool [options]", "Syntaxe : policytool [options]"]), Array.typed(Object).new(["  [-file <file>]    policy file location", ("  [-file <fichier>]    emplacement du fichier de r".to_u << 0x00e8 << "gles")]), Array.typed(Object).new(["New", "Nouveau"]), Array.typed(Object).new(["Open", "Ouvrir"]), Array.typed(Object).new(["Save", "Enregistrer"]), Array.typed(Object).new(["Save As", "Enregistrer sous"]), Array.typed(Object).new(["View Warning Log", "Afficher le journal des avertissements"]), Array.typed(Object).new(["Exit", "Quitter"]), Array.typed(Object).new(["Add Policy Entry", ("Ajouter une r".to_u << 0x00e8 << "gle")]), Array.typed(Object).new(["Edit Policy Entry", ("Modifier une r".to_u << 0x00e8 << "gle")]), Array.typed(Object).new(["Remove Policy Entry", ("Supprimer une r".to_u << 0x00e8 << "gle")]), Array.typed(Object).new(["Edit", "Edition"]), Array.typed(Object).new(["Retain", "Conserver"]), Array.typed(Object).new(["Warning: File name may include escaped backslash characters. " + "It is not necessary to escape backslash characters " + "(the tool escapes characters as necessary when writing " + "the policy contents to the persistent store).\n\n" + "Click on Retain to retain the entered name, or click on " + "Edit to edit the name.", "Warning: File name may include escaped backslash characters. " + "It is not necessary to escape backslash characters " + "(the tool escapes characters as necessary when writing " + "the policy contents to the persistent store).\n\n" + "Click on Retain to retain the entered name, or click on " + "Edit to edit the name."]), Array.typed(Object).new(["Add Public Key Alias", ("Ajouter un alias de cl".to_u << 0x00e9 << " publique")]), Array.typed(Object).new(["Remove Public Key Alias", ("Supprimer un alias de cl".to_u << 0x00e9 << " publique")]), Array.typed(Object).new(["File", "Fichier"]), Array.typed(Object).new(["KeyStore", "KeyStore"]), Array.typed(Object).new(["Policy File:", ("Fichier de r".to_u << 0x00e8 << "gles :")]), Array.typed(Object).new(["Could not open policy file: policyFile: e.toString()", ("Impossible d'ouvrir le fichier de strat".to_u << 0x00e9 << "gie".to_u << 0x00a0 << ": {0}: {1}")]), Array.typed(Object).new(["Policy Tool", "Policy Tool"]), Array.typed(Object).new(["Errors have occurred while opening the policy configuration.  View the Warning Log for more information.", ("Des erreurs se sont produites ".to_u << 0x00e0 << " l'ouverture de la configuration de r".to_u << 0x00e8 << "gles. Consultez le journal des avertissements pour obtenir des informations.")]), Array.typed(Object).new(["Error", "Erreur"]), Array.typed(Object).new(["OK", "OK"]), Array.typed(Object).new(["Status", ("".to_u << 0x00c9 << "tat")]), Array.typed(Object).new(["Warning", "Avertissement"]), Array.typed(Object).new(["Permission:                                                       ", "Permission :                                                       "]), Array.typed(Object).new(["Principal Type:", "Type de principal :"]), Array.typed(Object).new(["Principal Name:", "Nom de principal :"]), Array.typed(Object).new(["Target Name:                                                    ", "Nom de cible :                                                    "]), Array.typed(Object).new(["Actions:                                                             ", "Actions :                                                             "]), Array.typed(Object).new(["OK to overwrite existing file filename?", "Remplacer le fichier existant {0} ?"]), Array.typed(Object).new(["Cancel", "Annuler"]), Array.typed(Object).new(["CodeBase:", "Base de code :"]), Array.typed(Object).new(["SignedBy:", ("Sign".to_u << 0x00e9 << " par :")]), Array.typed(Object).new(["Add Principal", "Ajouter un principal"]), Array.typed(Object).new(["Edit Principal", "Modifier un principal"]), Array.typed(Object).new(["Remove Principal", "Supprimer un principal"]), Array.typed(Object).new(["Principals:", "Principaux :"]), Array.typed(Object).new(["  Add Permission", " Ajouter une permission"]), Array.typed(Object).new(["  Edit Permission", " Modifier une permission"]), Array.typed(Object).new(["Remove Permission", "Supprimer une permission"]), Array.typed(Object).new(["Done", ("Termin".to_u << 0x00e9 << "")]), Array.typed(Object).new(["KeyStore URL:", "URL du KeyStore :"]), Array.typed(Object).new(["KeyStore Type:", "Type de KeyStore :"]), Array.typed(Object).new(["KeyStore Provider:", "Fournisseur du KeyStore :"]), Array.typed(Object).new(["KeyStore Password URL:", "URL du mot de passe du KeyStore :"]), Array.typed(Object).new(["Principals", "Principaux"]), Array.typed(Object).new(["  Edit Principal:", " Modifier un principal :"]), Array.typed(Object).new(["  Add New Principal:", " Ajouter un principal :"]), Array.typed(Object).new(["Permissions", "Permissions"]), Array.typed(Object).new(["  Edit Permission:", " Modifier une permission :"]), Array.typed(Object).new(["  Add New Permission:", " Ajouter une permission :"]), Array.typed(Object).new(["Signed By:", ("Sign".to_u << 0x00e9 << " par :")]), Array.typed(Object).new(["Cannot Specify Principal with a Wildcard Class without a Wildcard Name", ("Impossible de sp".to_u << 0x00e9 << "cifier un principal avec une classe g".to_u << 0x00e9 << "n".to_u << 0x00e9 << "rique sans nom de g".to_u << 0x00e9 << "n".to_u << 0x00e9 << "rique")]), Array.typed(Object).new(["Cannot Specify Principal without a Name", ("Impossible de sp".to_u << 0x00e9 << "cifier un principal sans nom")]), Array.typed(Object).new(["Permission and Target Name must have a value", "La permission et le nom de cible doivent avoir une valeur"]), Array.typed(Object).new(["Remove this Policy Entry?", ("Supprimer cette r".to_u << 0x00e8 << "gle ?")]), Array.typed(Object).new(["Overwrite File", "Remplacer le fichier"]), Array.typed(Object).new(["Policy successfully written to filename", ("R".to_u << 0x00e8 << "gle enregistr".to_u << 0x00e9 << "e dans {0}")]), Array.typed(Object).new(["null filename", "Nom Null de fichier"]), Array.typed(Object).new(["Save changes?", "Enregistrer les modifications ?"]), Array.typed(Object).new(["Yes", "Oui"]), Array.typed(Object).new(["No", "Non"]), Array.typed(Object).new(["Policy Entry", ("R".to_u << 0x00e8 << "gle")]), Array.typed(Object).new(["Save Changes", "Enregistrer les changements"]), Array.typed(Object).new(["No Policy Entry selected", ("Aucune r".to_u << 0x00e8 << "gle s".to_u << 0x00e9 << "lectionn".to_u << 0x00e9 << "e")]), Array.typed(Object).new(["Unable to open KeyStore: ex.toString()", ("Impossible d'ouvrir le keystore".to_u << 0x00a0 << ": {0}")]), Array.typed(Object).new(["No principal selected", ("Aucun principal s".to_u << 0x00e9 << "lectionn".to_u << 0x00e9 << "")]), Array.typed(Object).new(["No permission selected", ("Aucune permission s".to_u << 0x00e9 << "lectionn".to_u << 0x00e9 << "e")]), Array.typed(Object).new(["name", "nom"]), Array.typed(Object).new(["configuration type", "type de configuration"]), Array.typed(Object).new(["environment variable name", "Nom variable de l'environnement"]), Array.typed(Object).new(["library name", ("nom de biblioth".to_u << 0x00e8 << "que")]), Array.typed(Object).new(["package name", "nom de package"]), Array.typed(Object).new(["policy type", ("type de strat".to_u << 0x00e9 << "gie")]), Array.typed(Object).new(["property name", ("nom de propri".to_u << 0x00e9 << "t".to_u << 0x00e9 << "")]), Array.typed(Object).new(["provider name", "nom de fournisseur"]), Array.typed(Object).new(["Principal List", "Liste de mandants"]), Array.typed(Object).new(["Permission List", "Liste de droits"]), Array.typed(Object).new(["Code Base", "Base de codes"]), Array.typed(Object).new(["KeyStore U R L:", "URL du KeyStore :"]), Array.typed(Object).new(["KeyStore Password U R L:", "URL du mot de passe du KeyStore :"]), Array.typed(Object).new(["invalid null input(s)", ("Entr".to_u << 0x00e9 << "e() Null non valide(s)")]), Array.typed(Object).new(["actions can only be 'read'", ("les actions peuvent ".to_u << 0x00ea << "tre accessibles en 'lecture' uniquement")]), Array.typed(Object).new(["permission name [name] syntax invalid: ", "syntaxe de nom de permission [{0}] non valide : "]), Array.typed(Object).new(["Credential Class not followed by a Principal Class and Name", "Classe Credential non suivie d'une classe et d'un nom de principal"]), Array.typed(Object).new(["Principal Class not followed by a Principal Name", "Classe de principal non suivie d'un nom de principal"]), Array.typed(Object).new(["Principal Name must be surrounded by quotes", ("Le nom de principal doit ".to_u << 0x00ea << "tre entre guillemets")]), Array.typed(Object).new(["Principal Name missing end quote", "Guillemet fermant manquant pour nom de principal"]), Array.typed(Object).new(["PrivateCredentialPermission Principal Class can not be a wildcard (*) value if Principal Name is not a wildcard (*) value", ("La classe principale PrivateCredentialPermission ne peut ".to_u << 0x00ea << "tre une valeur g".to_u << 0x00e9 << "n".to_u << 0x00e9 << "rique (*) si le nom de principal n'est pas une valeur g".to_u << 0x00e9 << "n".to_u << 0x00e9 << "rique (*)")]), Array.typed(Object).new(["CredOwner:\n\tPrincipal Class = class\n\tPrincipal Name = name", "CredOwner :\n\tClasse principale = {0}\n\tNom principal = {1}"]), Array.typed(Object).new(["provided null name", ("nom Null sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << "")]), Array.typed(Object).new(["provided null keyword map", ("Mappage des mots cl".to_u << 0x00e9 << "s Null fourni")]), Array.typed(Object).new(["provided null OID map", "Mappage OID Null fourni"]), Array.typed(Object).new(["invalid null AccessControlContext provided", ("AccessControlContext Null sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << " non valide")]), Array.typed(Object).new(["invalid null action provided", ("action Null sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << "e non valide")]), Array.typed(Object).new(["invalid null Class provided", ("classe Null sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << "e non valide")]), Array.typed(Object).new(["Subject:\n", "Objet :\n"]), Array.typed(Object).new(["\tPrincipal: ", "\tPrincipal : "]), Array.typed(Object).new(["\tPublic Credential: ", ("\tIdentit".to_u << 0x00e9 << " publique : ")]), Array.typed(Object).new(["\tPrivate Credentials inaccessible\n", ("\tIdentit".to_u << 0x00e9 << "s priv".to_u << 0x00e9 << "es inaccessibles\n")]), Array.typed(Object).new(["\tPrivate Credential: ", ("\tIdentit".to_u << 0x00e9 << " priv".to_u << 0x00e9 << "e : ")]), Array.typed(Object).new(["\tPrivate Credential inaccessible\n", ("\tIdentit".to_u << 0x00e9 << " priv".to_u << 0x00e9 << "e inaccessible\n")]), Array.typed(Object).new(["Subject is read-only", "Objet en lecture seule"]), Array.typed(Object).new(["attempting to add an object which is not an instance of java.security.Principal to a Subject's Principal Set", "tentative d'ajout d'un objet qui n'est pas une instance de java.security.Principal dans un ensemble principal d'objet"]), Array.typed(Object).new(["attempting to add an object which is not an instance of class", "tentative d''ajout d''un objet qui n''est pas une instance de {0}"]), Array.typed(Object).new(["LoginModuleControlFlag: ", "LoginModuleControlFlag : "]), Array.typed(Object).new(["Invalid null input: name", ("Entr".to_u << 0x00e9 << "e Null non valide : nom")]), Array.typed(Object).new(["No LoginModules configured for name", ("Aucun LoginModule configur".to_u << 0x00e9 << " pour {0}")]), Array.typed(Object).new(["invalid null Subject provided", ("sujet Null sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << " non valide")]), Array.typed(Object).new(["invalid null CallbackHandler provided", ("CallbackHandler Null sp".to_u << 0x00e9 << "cifi".to_u << 0x00e9 << " non valide")]), Array.typed(Object).new(["null subject - logout called before login", ("sujet Null - tentative de d".to_u << 0x00e9 << "connexion avant connexion")]), Array.typed(Object).new(["unable to instantiate LoginModule, module, because it does not provide a no-argument constructor", "impossible d''instancier LoginModule {0} car il ne fournit pas de constructeur sans argument"]), Array.typed(Object).new(["unable to instantiate LoginModule", "impossible d'instancier LoginModule"]), Array.typed(Object).new(["unable to instantiate LoginModule: ", ("impossible d'instancier LoginModule".to_u << 0x00a0 << ": ")]), Array.typed(Object).new(["unable to find LoginModule class: ", "classe LoginModule introuvable : "]), Array.typed(Object).new(["unable to access LoginModule: ", ("impossible d'acc".to_u << 0x00e9 << "der ".to_u << 0x00e0 << " LoginModule : ")]), Array.typed(Object).new(["Login Failure: all modules ignored", ("Echec de connexion : tous les modules ont ".to_u << 0x00e9 << "t".to_u << 0x00e9 << " ignor".to_u << 0x00e9 << "s")]), Array.typed(Object).new(["java.security.policy: error parsing policy:\n\tmessage", "java.security.policy : erreur d''analyse de {0} :\n\t{1}"]), Array.typed(Object).new(["java.security.policy: error adding Permission, perm:\n\tmessage", "java.security.policy : erreur d''ajout de permission, {0} :\n\t{1}"]), Array.typed(Object).new(["java.security.policy: error adding Entry:\n\tmessage", ("java.security.policy : erreur d''ajout d''entr".to_u << 0x00e9 << "e :\n\t{0}")]), Array.typed(Object).new(["alias name not provided (pe.name)", "nom d''alias non fourni ({0})"]), Array.typed(Object).new(["unable to perform substitution on alias, suffix", "impossible d''effectuer une substitution pour l''alias, {0}"]), Array.typed(Object).new(["substitution value, prefix, unsupported", "valeur de substitution, {0}, non prise en charge"]), Array.typed(Object).new(["(", "("]), Array.typed(Object).new([")", ")"]), Array.typed(Object).new(["type can't be null", ("le type ne peut ".to_u << 0x00ea << "tre Null")]), Array.typed(Object).new(["keystorePasswordURL can not be specified without also specifying keystore", ("Impossible de sp".to_u << 0x00e9 << "cifier keystorePasswordURL sans sp".to_u << 0x00e9 << "cifier aussi le keystore")]), Array.typed(Object).new(["expected keystore type", ("type keystore pr".to_u << 0x00e9 << "vu")]), Array.typed(Object).new(["expected keystore provider", ("fournisseur keystore pr".to_u << 0x00e9 << "vu")]), Array.typed(Object).new(["multiple Codebase expressions", "expressions Codebase multiples"]), Array.typed(Object).new(["multiple SignedBy expressions", "expressions SignedBy multiples"]), Array.typed(Object).new(["SignedBy has empty alias", ("SignedBy poss".to_u << 0x00e8 << "de un alias vide")]), Array.typed(Object).new(["can not specify Principal with a wildcard class without a wildcard name", ("impossible de sp".to_u << 0x00e9 << "cifier Principal avec une classe g".to_u << 0x00e9 << "n".to_u << 0x00e9 << "rique sans nom g".to_u << 0x00e9 << "n".to_u << 0x00e9 << "rique")]), Array.typed(Object).new(["expected codeBase or SignedBy or Principal", ("codeBase ou SignedBy ou Principal pr".to_u << 0x00e9 << "vu")]), Array.typed(Object).new(["expected permission entry", ("entr".to_u << 0x00e9 << "e de permission pr".to_u << 0x00e9 << "vue")]), Array.typed(Object).new(["number ", "nombre "]), Array.typed(Object).new(["expected [expect], read [end of file]", ("pr".to_u << 0x00e9 << "vu [{0}], lecture [fin de fichier]")]), Array.typed(Object).new(["expected [;], read [end of file]", ("pr".to_u << 0x00e9 << "vu [;], lecture [fin de fichier]")]), Array.typed(Object).new(["line number: msg", "ligne {0} : {1}"]), Array.typed(Object).new(["line number: expected [expect], found [actual]", ("ligne {0} : pr".to_u << 0x00e9 << "vu [{1}], trouv".to_u << 0x00e9 << " [{2}]")]), Array.typed(Object).new(["null principalClass or principalName", "principalClass ou principalName Null"]), Array.typed(Object).new(["PKCS11 Token [providerName] Password: ", "Mot de passe PKCS11 Token [{0}] : "]), Array.typed(Object).new(["unable to instantiate Subject-based policy", ("impossible d'instancier la strat".to_u << 0x00e9 << "gie Subject")])]) }
      const_attr_reader  :Contents
    }
    
    typesig { [] }
    # Returns the contents of this <code>ResourceBundle</code>.
    # 
    # <p>
    # 
    # @return the contents of this <code>ResourceBundle</code>.
    def get_contents
      return Contents
    end
    
    typesig { [] }
    def initialize
      super()
    end
    
    private
    alias_method :initialize__resources_fr, :initialize
  end
  
end
